//! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è MongoDB
//!
//! –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
//! 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å MongoDB:
//!    docker run -d --name mongodb-test -p 27017:27017 mongo:latest
//! 2. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã:
//!    cargo test --test mongodb_integration_tests -- --test-threads=1
//!
//! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ --ignored –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ MongoDB:
//!    cargo test --test mongodb_integration_tests

use mongodb::bson::{doc, Document};
use robots::data_access::database::{MongoDBConfig, MongoDBConnector};
use robots::data_access::traits::{DataSource, Database};

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
async fn create_test_connector() -> MongoDBConnector {
    let config = MongoDBConfig {
        host: std::env::var("MONGODB_HOST").unwrap_or_else(|_| "localhost".to_string()),
        port: std::env::var("MONGODB_PORT")
            .unwrap_or_else(|_| "27017".to_string())
            .parse()
            .unwrap_or(27017),
        database: "trading_test".to_string(),
        username: None,
        password: None,
        auth_database: Some("admin".to_string()),
        max_pool_size: Some(10),
        min_pool_size: Some(5),
        max_idle_time: Some(300),
        connect_timeout: Some(5),
        server_selection_timeout: Some(5),
    };

    MongoDBConnector::new(config)
}

/// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ MongoDB
fn is_mongodb_available() -> bool {
    std::env::var("MONGODB_AVAILABLE").unwrap_or_else(|_| "false".to_string()) == "true"
}

// ============================================================================
// –¢–ï–°–¢–´ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
// ============================================================================

#[tokio::test]
#[ignore] // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ç.–∫. —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—É—â–µ–Ω–Ω—ã–π MongoDB
async fn test_mongodb_connection() {
    if !is_mongodb_available() {
        println!("‚ö†Ô∏è  MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω");
        return;
    }

    let mut connector = create_test_connector().await;

    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    let result = connector.connect().await;
    assert!(
        result.is_ok(),
        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB: {:?}",
        result.err()
    );
    assert!(connector.is_connected(), "–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω");

    // –¢–µ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    let disconnect_result = connector.disconnect().await;
    assert!(
        disconnect_result.is_ok(),
        "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {:?}",
        disconnect_result.err()
    );
    assert!(!connector.is_connected(), "–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω");

    println!("‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω");
}

#[tokio::test]
#[ignore]
async fn test_connection_info() {
    let connector = create_test_connector().await;
    let info = connector.connection_info();

    assert_eq!(info.host, "localhost");
    assert_eq!(info.port, 27017);
    assert_eq!(info.database, Some("trading_test".to_string()));

    println!("‚úÖ –¢–µ—Å—Ç connection_info –ø—Ä–æ–π–¥–µ–Ω");
}

// ============================================================================
// –¢–ï–°–¢–´ –ë–ê–ó–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô
// ============================================================================

#[tokio::test]
#[ignore]
async fn test_index_creation() {
    if !is_mongodb_available() {
        return;
    }

    let mut connector = create_test_connector().await;
    connector.connect().await.unwrap();

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    let result = connector.create_indexes().await;
    assert!(
        result.is_ok(),
        "–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å: {:?}",
        result.err()
    );

    println!("‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –ø—Ä–æ–π–¥–µ–Ω");
    connector.disconnect().await.unwrap();
}

#[tokio::test]
#[ignore]
async fn test_document_operations() {
    if !is_mongodb_available() {
        return;
    }

    let mut connector = create_test_connector().await;
    connector.connect().await.unwrap();

    // –í—Å—Ç–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    let insert_query = r#"db.test_collection.insertOne({"name": "test", "value": 123})"#;
    let insert_result = connector.execute(insert_query).await;
    assert!(
        insert_result.is_ok(),
        "–í—Å—Ç–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {:?}",
        insert_result.err()
    );

    println!("‚úÖ –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –ø—Ä–æ–π–¥–µ–Ω");
    connector.disconnect().await.unwrap();
}

#[tokio::test]
#[ignore]
async fn test_candle_operations() {
    if !is_mongodb_available() {
        return;
    }

    let mut connector = create_test_connector().await;
    connector.connect().await.unwrap();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ get_candles
    let start_time = chrono::Utc::now() - chrono::Duration::hours(24);
    let end_time = chrono::Utc::now();
    let result = connector
        .get_candles("BTCUSDT", start_time, end_time, Some(10))
        .await;
    assert!(
        result.is_ok(),
        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –Ω–µ —É–¥–∞–ª–æ—Å—å: {:?}",
        result.err()
    );

    println!("‚úÖ –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å–≤–µ—á–∞–º–∏ –ø—Ä–æ–π–¥–µ–Ω");
    connector.disconnect().await.unwrap();
}

// ============================================================================
// –¢–ï–°–¢–´ ERROR HANDLING
// ============================================================================

#[tokio::test]
async fn test_mongodb_connection_error_handling() {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    let config = MongoDBConfig {
        host: "invalid_host".to_string(),
        port: 9999,
        database: "test".to_string(),
        username: None,
        password: None,
        auth_database: None,
        max_pool_size: Some(5),
        min_pool_size: Some(1),
        max_idle_time: Some(10),
        connect_timeout: Some(1),
        server_selection_timeout: Some(1),
    };

    let mut connector = MongoDBConnector::new(config);

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ö–æ—Å—Ç—É
    let result = connector.connect().await;
    println!(
        "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É MongoDB: {:?}",
        result
    );
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞
}

#[tokio::test]
async fn test_query_without_connection() {
    let connector = create_test_connector().await;
    // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º connect()

    let result = connector.query::<Document>("{}").await;
    assert!(
        result.is_err(),
        "–ó–∞–ø—Ä–æ—Å –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É"
    );

    println!("‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–æ–π–¥–µ–Ω");
}

// ============================================================================
// –¢–ï–°–¢–´ –†–ê–ë–û–¢–´ –° –ö–û–õ–õ–ï–ö–¶–ò–Ø–ú–ò
// ============================================================================

#[tokio::test]
#[ignore]
async fn test_collection_operations() {
    if !is_mongodb_available() {
        return;
    }

    let mut connector = create_test_connector().await;
    connector.connect().await.unwrap();

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    let collection_result = connector.get_collection::<Document>("test_collection");
    assert!(
        collection_result.is_ok(),
        "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å: {:?}",
        collection_result.err()
    );

    println!("‚úÖ –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ –ø—Ä–æ–π–¥–µ–Ω");
    connector.disconnect().await.unwrap();
}

#[tokio::test]
#[ignore]
async fn test_trade_operations() {
    if !is_mongodb_available() {
        return;
    }

    let mut connector = create_test_connector().await;
    connector.connect().await.unwrap();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ get_trades
    let result = connector.get_trades(None, None, None, Some(10)).await;
    assert!(
        result.is_ok(),
        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å: {:?}",
        result.err()
    );

    println!("‚úÖ –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å–¥–µ–ª–∫–∞–º–∏ –ø—Ä–æ–π–¥–µ–Ω");
    connector.disconnect().await.unwrap();
}

#[tokio::test]
#[ignore]
async fn test_backtest_operations() {
    if !is_mongodb_available() {
        return;
    }

    let mut connector = create_test_connector().await;
    connector.connect().await.unwrap();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ get_backtest_results
    let result = connector.get_backtest_results(None, None, Some(10)).await;
    assert!(
        result.is_ok(),
        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å: {:?}",
        result.err()
    );

    println!("‚úÖ –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±—ç–∫—Ç–µ—Å—Ç–∞–º–∏ –ø—Ä–æ–π–¥–µ–Ω");
    connector.disconnect().await.unwrap();
}

#[tokio::test]
#[ignore]
async fn test_complete_workflow() {
    if !is_mongodb_available() {
        return;
    }

    let mut connector = create_test_connector().await;
    connector.connect().await.unwrap();

    println!("üìù –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ MongoDB");

    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    connector.create_indexes().await.unwrap();
    println!("  ‚úì –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã");

    // 2. –†–∞–±–æ—Ç–∞ —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
    let collection = connector
        .get_collection::<Document>("test_collection")
        .unwrap();
    println!("  ‚úì –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞");

    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    let candles = connector
        .get_candles("BTCUSDT", None, None, Some(10))
        .await
        .unwrap();
    println!("  ‚úì –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π", candles.len());

    let trades = connector
        .get_trades(None, None, None, Some(10))
        .await
        .unwrap();
    println!("  ‚úì –ü–æ–ª—É—á–µ–Ω–æ {} —Å–¥–µ–ª–æ–∫", trades.len());

    println!("‚úÖ –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    connector.disconnect().await.unwrap();
}

// ============================================================================
// –ü–†–û–°–¢–´–ï –¢–ï–°–¢–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò
// ============================================================================

#[tokio::test]
#[ignore]
async fn test_basic_query() {
    if !is_mongodb_available() {
        return;
    }

    let mut connector = create_test_connector().await;
    connector.connect().await.unwrap();

    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    let result = connector.query::<Document>("{}").await;
    assert!(result.is_ok(), "–ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è");

    println!("‚úÖ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–π–¥–µ–Ω");
    connector.disconnect().await.unwrap();
}

#[tokio::test]
#[ignore]
async fn test_basic_execute() {
    if !is_mongodb_available() {
        return;
    }

    let mut connector = create_test_connector().await;
    connector.connect().await.unwrap();

    // –ü—Ä–æ—Å—Ç–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    let result = connector.execute("db.test.find()").await;
    assert!(result.is_ok(), "–ë–∞–∑–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å");

    println!("‚úÖ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω");
    connector.disconnect().await.unwrap();
}
