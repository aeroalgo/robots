using System;
using System.Collections.Generic;
using TSLab.Script;
using TSLab.Script.Handlers;
using TSLab.Script.Helpers;

namespace vvTSLtools
{
	// Token: 0x02000055 RID: 85
	[HandlerCategory("vvIndicators"), HandlerName("Sadukey")]
	public class Sadukey : IBar2DoubleHandler, IOneSourceHandler, IDoubleReturns, IStreamHandler, IHandler, ISecurityInputs, IContextUses
	{
		// Token: 0x06000302 RID: 770 RVA: 0x0001176D File Offset: 0x0000F96D
		public IList<double> Execute(ISecurity src)
		{
			return Sadukey.GenSadukey(src, this.Context);
		}

		// Token: 0x06000301 RID: 769 RVA: 0x0000E670 File Offset: 0x0000C870
		public static IList<double> GenSadukey(ISecurity _sec, IContext context)
		{
			if (_sec.get_Bars().Count < 66)
			{
				return null;
			}
			IList<double> list = new List<double>(_sec.get_Bars().Count);
			IList<double> openPrices = _sec.get_OpenPrices();
			IList<double> closePrices = _sec.get_ClosePrices();
			IList<double> highPrices = _sec.get_HighPrices();
			IList<double> lowPrices = _sec.get_LowPrices();
			context.GetData("MedianPrice", new string[]
			{
				_sec.get_CacheName()
			}, () => Series.MedianPrice(_sec.get_Bars()));
			for (int i = 0; i < 67; i++)
			{
				list.Add(0.0);
			}
			for (int j = 67; j < _sec.get_Bars().Count; j++)
			{
				double num = 0.11859648 * ((openPrices[j] + closePrices[j] + highPrices[j] + lowPrices[j]) / 4.0 + closePrices[j]) / 2.0 + 0.11781324 * ((openPrices[j - 1] + closePrices[j - 1] + highPrices[j - 1] + lowPrices[j - 1]) / 4.0 + closePrices[j - 1]) / 2.0 + 0.11548308 * ((openPrices[j - 2] + closePrices[j - 2] + highPrices[j - 2] + lowPrices[j - 2]) / 4.0 + closePrices[j - 2]) / 2.0 + 0.11166411 * ((openPrices[j - 3] + closePrices[j - 3] + highPrices[j - 3] + lowPrices[j - 3]) / 4.0 + closePrices[j - 3]) / 2.0 + 0.10645106 * ((openPrices[j - 4] + closePrices[j - 4] + highPrices[j - 4] + lowPrices[j - 4]) / 4.0 + closePrices[j - 4]) / 2.0 + 0.09997253 * ((openPrices[j - 5] + closePrices[j - 5] + highPrices[j - 5] + lowPrices[j - 5]) / 4.0 + closePrices[j - 5]) / 2.0 + 0.09238688 * ((openPrices[j - 6] + closePrices[j - 6] + highPrices[j - 6] + lowPrices[j - 6]) / 4.0 + closePrices[j - 6]) / 2.0 + 0.08387751 * ((openPrices[j - 7] + closePrices[j - 7] + highPrices[j - 7] + lowPrices[j - 7]) / 4.0 + closePrices[j - 7]) / 2.0 + 0.07464713 * ((openPrices[j - 8] + closePrices[j - 8] + highPrices[j - 8] + lowPrices[j - 8]) / 4.0 + closePrices[j - 8]) / 2.0 + 0.06491178 * ((openPrices[j - 9] + closePrices[j - 9] + highPrices[j - 9] + lowPrices[j - 9]) / 4.0 + closePrices[j - 9]) / 2.0 + 0.05489443 * ((openPrices[j - 10] + closePrices[j - 10] + highPrices[j - 10] + lowPrices[j - 10]) / 4.0 + closePrices[j - 10]) / 2.0 + 0.04481833 * ((openPrices[j - 11] + closePrices[j - 11] + highPrices[j - 11] + lowPrices[j - 11]) / 4.0 + closePrices[j - 11]) / 2.0 + 0.03490071 * ((openPrices[j - 12] + closePrices[j - 12] + highPrices[j - 12] + lowPrices[j - 12]) / 4.0 + closePrices[j - 12]) / 2.0 + 0.02534672 * ((openPrices[j - 13] + closePrices[j - 13] + highPrices[j - 13] + lowPrices[j - 13]) / 4.0 + closePrices[j - 13]) / 2.0 + 0.01634375 * ((openPrices[j - 14] + closePrices[j - 14] + highPrices[j - 14] + lowPrices[j - 14]) / 4.0 + closePrices[j - 14]) / 2.0 + 0.00805678 * ((openPrices[j - 15] + closePrices[j - 15] + highPrices[j - 15] + lowPrices[j - 15]) / 4.0 + closePrices[j - 15]) / 2.0 + 0.00062421 * ((openPrices[j - 16] + closePrices[j - 16] + highPrices[j - 16] + lowPrices[j - 16]) / 4.0 + closePrices[j - 16]) / 2.0 - 0.00584512 * ((openPrices[j - 17] + closePrices[j - 17] + highPrices[j - 17] + lowPrices[j - 17]) / 4.0 + closePrices[j - 17]) / 2.0 - 0.01127391 * ((openPrices[j - 18] + closePrices[j - 18] + highPrices[j - 18] + lowPrices[j - 18]) / 4.0 + closePrices[j - 18]) / 2.0 - 0.01561738 * ((openPrices[j - 19] + closePrices[j - 19] + highPrices[j - 19] + lowPrices[j - 19]) / 4.0 + closePrices[j - 19]) / 2.0 - 0.01886307 * ((openPrices[j - 20] + closePrices[j - 20] + highPrices[j - 20] + lowPrices[j - 20]) / 4.0 + closePrices[j - 20]) / 2.0 - 0.02102974 * ((openPrices[j - 21] + closePrices[j - 21] + highPrices[j - 21] + lowPrices[j - 21]) / 4.0 + closePrices[j - 21]) / 2.0 - 0.02216516 * ((openPrices[j - 22] + closePrices[j - 22] + highPrices[j - 22] + lowPrices[j - 22]) / 4.0 + closePrices[j - 22]) / 2.0 - 0.02234315 * ((openPrices[j - 23] + closePrices[j - 23] + highPrices[j - 23] + lowPrices[j - 23]) / 4.0 + closePrices[j - 23]) / 2.0 - 0.02165992 * ((openPrices[j - 24] + closePrices[j - 24] + highPrices[j - 24] + lowPrices[j - 24]) / 4.0 + closePrices[j - 24]) / 2.0 - 0.02022973 * ((openPrices[j - 25] + closePrices[j - 25] + highPrices[j - 25] + lowPrices[j - 25]) / 4.0 + closePrices[j - 25]) / 2.0 - 0.01818026 * ((openPrices[j - 26] + closePrices[j - 26] + highPrices[j - 26] + lowPrices[j - 26]) / 4.0 + closePrices[j - 26]) / 2.0 - 0.01564777 * ((openPrices[j - 27] + closePrices[j - 27] + highPrices[j - 27] + lowPrices[j - 27]) / 4.0 + closePrices[j - 27]) / 2.0 - 0.01277219 * ((openPrices[j - 28] + closePrices[j - 28] + highPrices[j - 28] + lowPrices[j - 28]) / 4.0 + closePrices[j - 28]) / 2.0 - 0.0096923 * ((openPrices[j - 29] + closePrices[j - 29] + highPrices[j - 29] + lowPrices[j - 29]) / 4.0 + closePrices[j - 29]) / 2.0 - 0.00654127 * ((openPrices[j - 30] + closePrices[j - 30] + highPrices[j - 30] + lowPrices[j - 30]) / 4.0 + closePrices[j - 30]) / 2.0 - 0.00344276 * ((openPrices[j - 31] + closePrices[j - 31] + highPrices[j - 31] + lowPrices[j - 31]) / 4.0 + closePrices[j - 31]) / 2.0 - 0.00050728 * ((openPrices[j - 32] + closePrices[j - 32] + highPrices[j - 32] + lowPrices[j - 32]) / 4.0 + closePrices[j - 32]) / 2.0 + 0.00217042 * ((openPrices[j - 33] + closePrices[j - 33] + highPrices[j - 33] + lowPrices[j - 33]) / 4.0 + closePrices[j - 33]) / 2.0 + 0.00451354 * ((openPrices[j - 34] + closePrices[j - 34] + highPrices[j - 34] + lowPrices[j - 34]) / 4.0 + closePrices[j - 34]) / 2.0 + 0.00646441 * ((openPrices[j - 35] + closePrices[j - 35] + highPrices[j - 35] + lowPrices[j - 35]) / 4.0 + closePrices[j - 35]) / 2.0 + 0.00798513 * ((openPrices[j - 36] + closePrices[j - 36] + highPrices[j - 36] + lowPrices[j - 36]) / 4.0 + closePrices[j - 36]) / 2.0 + 0.00905725 * ((openPrices[j - 37] + closePrices[j - 37] + highPrices[j - 37] + lowPrices[j - 37]) / 4.0 + closePrices[j - 37]) / 2.0 + 0.00968091 * ((openPrices[j - 38] + closePrices[j - 38] + highPrices[j - 38] + lowPrices[j - 38]) / 4.0 + closePrices[j - 38]) / 2.0 + 0.00987326 * ((openPrices[j - 39] + closePrices[j - 39] + highPrices[j - 39] + lowPrices[j - 39]) / 4.0 + closePrices[j - 39]) / 2.0 + 0.00966639 * ((openPrices[j - 40] + closePrices[j - 40] + highPrices[j - 40] + lowPrices[j - 40]) / 4.0 + closePrices[j - 40]) / 2.0 + 0.00910488 * ((openPrices[j - 41] + closePrices[j - 41] + highPrices[j - 41] + lowPrices[j - 41]) / 4.0 + closePrices[j - 41]) / 2.0 + 0.00824306 * ((openPrices[j - 42] + closePrices[j - 42] + highPrices[j - 42] + lowPrices[j - 42]) / 4.0 + closePrices[j - 42]) / 2.0 + 0.00714199 * ((openPrices[j - 43] + closePrices[j - 43] + highPrices[j - 43] + lowPrices[j - 43]) / 4.0 + closePrices[j - 43]) / 2.0 + 0.00586655 * ((openPrices[j - 44] + closePrices[j - 44] + highPrices[j - 44] + lowPrices[j - 44]) / 4.0 + closePrices[j - 44]) / 2.0 + 0.00448255 * ((openPrices[j - 45] + closePrices[j - 45] + highPrices[j - 45] + lowPrices[j - 45]) / 4.0 + closePrices[j - 45]) / 2.0 + 0.00305396 * ((openPrices[j - 46] + closePrices[j - 46] + highPrices[j - 46] + lowPrices[j - 46]) / 4.0 + closePrices[j - 46]) / 2.0 + 0.00164061 * ((openPrices[j - 47] + closePrices[j - 47] + highPrices[j - 47] + lowPrices[j - 47]) / 4.0 + closePrices[j - 47]) / 2.0 + 0.00029596 * ((openPrices[j - 48] + closePrices[j - 48] + highPrices[j - 48] + lowPrices[j - 48]) / 4.0 + closePrices[j - 48]) / 2.0 - 0.00093445 * ((openPrices[j - 49] + closePrices[j - 49] + highPrices[j - 49] + lowPrices[j - 49]) / 4.0 + closePrices[j - 49]) / 2.0 - 0.00201426 * ((openPrices[j - 50] + closePrices[j - 50] + highPrices[j - 50] + lowPrices[j - 50]) / 4.0 + closePrices[j - 50]) / 2.0 - 0.00291701 * ((openPrices[j - 51] + closePrices[j - 51] + highPrices[j - 51] + lowPrices[j - 51]) / 4.0 + closePrices[j - 51]) / 2.0 - 0.00362661 * ((openPrices[j - 52] + closePrices[j - 52] + highPrices[j - 52] + lowPrices[j - 52]) / 4.0 + closePrices[j - 52]) / 2.0 - 0.00413703 * ((openPrices[j - 53] + closePrices[j - 53] + highPrices[j - 53] + lowPrices[j - 53]) / 4.0 + closePrices[j - 53]) / 2.0 - 0.00445206 * ((openPrices[j - 54] + closePrices[j - 54] + highPrices[j - 54] + lowPrices[j - 54]) / 4.0 + closePrices[j - 54]) / 2.0 - 0.00458437 * ((openPrices[j - 55] + closePrices[j - 55] + highPrices[j - 55] + lowPrices[j - 55]) / 4.0 + closePrices[j - 55]) / 2.0 - 0.00455457 * ((openPrices[j - 56] + closePrices[j - 56] + highPrices[j - 56] + lowPrices[j - 56]) / 4.0 + closePrices[j - 56]) / 2.0 - 0.00439006 * ((openPrices[j - 57] + closePrices[j - 57] + highPrices[j - 57] + lowPrices[j - 57]) / 4.0 + closePrices[j - 57]) / 2.0 - 0.00412379 * ((openPrices[j - 58] + closePrices[j - 58] + highPrices[j - 58] + lowPrices[j - 58]) / 4.0 + closePrices[j - 58]) / 2.0 - 0.00379323 * ((openPrices[j - 59] + closePrices[j - 59] + highPrices[j - 59] + lowPrices[j - 59]) / 4.0 + closePrices[j - 59]) / 2.0 - 0.00343966 * ((openPrices[j - 60] + closePrices[j - 60] + highPrices[j - 60] + lowPrices[j - 60]) / 4.0 + closePrices[j - 60]) / 2.0 - 0.0031085 * ((openPrices[j - 61] + closePrices[j - 61] + highPrices[j - 61] + lowPrices[j - 61]) / 4.0 + closePrices[j - 61]) / 2.0 - 0.00285188 * ((openPrices[j - 62] + closePrices[j - 62] + highPrices[j - 62] + lowPrices[j - 62]) / 4.0 + closePrices[j - 62]) / 2.0 - 0.00273508 * ((openPrices[j - 63] + closePrices[j - 63] + highPrices[j - 63] + lowPrices[j - 63]) / 4.0 + closePrices[j - 63]) / 2.0 - 0.00274361 * ((openPrices[j - 64] + closePrices[j - 64] + highPrices[j - 64] + lowPrices[j - 64]) / 4.0 + closePrices[j - 64]) / 2.0 + 0.01018757 * ((openPrices[j - 65] + closePrices[j - 65] + highPrices[j - 65] + lowPrices[j - 65]) / 4.0 + closePrices[j - 65]) / 2.0;
				double num2 = 0.11859648 * ((openPrices[j] + closePrices[j] + highPrices[j] + lowPrices[j]) / 4.0 + openPrices[j]) / 2.0 + 0.11781324 * ((openPrices[j - 1] + closePrices[j - 1] + highPrices[j - 1] + lowPrices[j - 1]) / 4.0 + openPrices[j - 1]) / 2.0 + 0.11548308 * ((openPrices[j - 2] + closePrices[j - 2] + highPrices[j - 2] + lowPrices[j - 2]) / 4.0 + openPrices[j - 2]) / 2.0 + 0.11166411 * ((openPrices[j - 3] + closePrices[j - 3] + highPrices[j - 3] + lowPrices[j - 3]) / 4.0 + openPrices[j - 3]) / 2.0 + 0.10645106 * ((openPrices[j - 4] + closePrices[j - 4] + highPrices[j - 4] + lowPrices[j - 4]) / 4.0 + openPrices[j - 4]) / 2.0 + 0.09997253 * ((openPrices[j - 5] + closePrices[j - 5] + highPrices[j - 5] + lowPrices[j - 5]) / 4.0 + openPrices[j - 5]) / 2.0 + 0.09238688 * ((openPrices[j - 6] + closePrices[j - 6] + highPrices[j - 6] + lowPrices[j - 6]) / 4.0 + openPrices[j - 6]) / 2.0 + 0.08387751 * ((openPrices[j - 7] + closePrices[j - 7] + highPrices[j - 7] + lowPrices[j - 7]) / 4.0 + openPrices[j - 7]) / 2.0 + 0.07464713 * ((openPrices[j - 8] + closePrices[j - 8] + highPrices[j - 8] + lowPrices[j - 8]) / 4.0 + openPrices[j - 8]) / 2.0 + 0.06491178 * ((openPrices[j - 9] + closePrices[j - 9] + highPrices[j - 9] + lowPrices[j - 9]) / 4.0 + openPrices[j - 9]) / 2.0 + 0.05489443 * ((openPrices[j - 10] + closePrices[j - 10] + highPrices[j - 10] + lowPrices[j - 10]) / 4.0 + openPrices[j - 10]) / 2.0 + 0.04481833 * ((openPrices[j - 11] + closePrices[j - 11] + highPrices[j - 11] + lowPrices[j - 11]) / 4.0 + openPrices[j - 11]) / 2.0 + 0.03490071 * ((openPrices[j - 12] + closePrices[j - 12] + highPrices[j - 12] + lowPrices[j - 12]) / 4.0 + openPrices[j - 12]) / 2.0 + 0.02534672 * ((openPrices[j - 13] + closePrices[j - 13] + highPrices[j - 13] + lowPrices[j - 13]) / 4.0 + openPrices[j - 13]) / 2.0 + 0.01634375 * ((openPrices[j - 14] + closePrices[j - 14] + highPrices[j - 14] + lowPrices[j - 14]) / 4.0 + openPrices[j - 14]) / 2.0 + 0.00805678 * ((openPrices[j - 15] + closePrices[j - 15] + highPrices[j - 15] + lowPrices[j - 15]) / 4.0 + openPrices[j - 15]) / 2.0 + 0.00062421 * ((openPrices[j - 16] + closePrices[j - 16] + highPrices[j - 16] + lowPrices[j - 16]) / 4.0 + openPrices[j - 16]) / 2.0 - 0.00584512 * ((openPrices[j - 17] + closePrices[j - 17] + highPrices[j - 17] + lowPrices[j - 17]) / 4.0 + openPrices[j - 17]) / 2.0 - 0.01127391 * ((openPrices[j - 18] + closePrices[j - 18] + highPrices[j - 18] + lowPrices[j - 18]) / 4.0 + openPrices[j - 18]) / 2.0 - 0.01561738 * ((openPrices[j - 19] + closePrices[j - 19] + highPrices[j - 19] + lowPrices[j - 19]) / 4.0 + openPrices[j - 19]) / 2.0 - 0.01886307 * ((openPrices[j - 20] + closePrices[j - 20] + highPrices[j - 20] + lowPrices[j - 20]) / 4.0 + openPrices[j - 20]) / 2.0 - 0.02102974 * ((openPrices[j - 21] + closePrices[j - 21] + highPrices[j - 21] + lowPrices[j - 21]) / 4.0 + openPrices[j - 21]) / 2.0 - 0.02216516 * ((openPrices[j - 22] + closePrices[j - 22] + highPrices[j - 22] + lowPrices[j - 22]) / 4.0 + openPrices[j - 22]) / 2.0 - 0.02234315 * ((openPrices[j - 23] + closePrices[j - 23] + highPrices[j - 23] + lowPrices[j - 23]) / 4.0 + openPrices[j - 23]) / 2.0 - 0.02165992 * ((openPrices[j - 24] + closePrices[j - 24] + highPrices[j - 24] + lowPrices[j - 24]) / 4.0 + openPrices[j - 24]) / 2.0 - 0.02022973 * ((openPrices[j - 25] + closePrices[j - 25] + highPrices[j - 25] + lowPrices[j - 25]) / 4.0 + openPrices[j - 25]) / 2.0 - 0.01818026 * ((openPrices[j - 26] + closePrices[j - 26] + highPrices[j - 26] + lowPrices[j - 26]) / 4.0 + openPrices[j - 26]) / 2.0 - 0.01564777 * ((openPrices[j - 27] + closePrices[j - 27] + highPrices[j - 27] + lowPrices[j - 27]) / 4.0 + openPrices[j - 27]) / 2.0 - 0.01277219 * ((openPrices[j - 28] + closePrices[j - 28] + highPrices[j - 28] + lowPrices[j - 28]) / 4.0 + openPrices[j - 28]) / 2.0 - 0.0096923 * ((openPrices[j - 29] + closePrices[j - 29] + highPrices[j - 29] + lowPrices[j - 29]) / 4.0 + openPrices[j - 29]) / 2.0 - 0.00654127 * ((openPrices[j - 30] + closePrices[j - 30] + highPrices[j - 30] + lowPrices[j - 30]) / 4.0 + openPrices[j - 30]) / 2.0 - 0.00344276 * ((openPrices[j - 31] + closePrices[j - 31] + highPrices[j - 31] + lowPrices[j - 31]) / 4.0 + openPrices[j - 31]) / 2.0 - 0.00050728 * ((openPrices[j - 32] + closePrices[j - 32] + highPrices[j - 32] + lowPrices[j - 32]) / 4.0 + openPrices[j - 32]) / 2.0 + 0.00217042 * ((openPrices[j - 33] + closePrices[j - 33] + highPrices[j - 33] + lowPrices[j - 33]) / 4.0 + openPrices[j - 33]) / 2.0 + 0.00451354 * ((openPrices[j - 34] + closePrices[j - 34] + highPrices[j - 34] + lowPrices[j - 34]) / 4.0 + openPrices[j - 34]) / 2.0 + 0.00646441 * ((openPrices[j - 35] + closePrices[j - 35] + highPrices[j - 35] + lowPrices[j - 35]) / 4.0 + openPrices[j - 35]) / 2.0 + 0.00798513 * ((openPrices[j - 36] + closePrices[j - 36] + highPrices[j - 36] + lowPrices[j - 36]) / 4.0 + openPrices[j - 36]) / 2.0 + 0.00905725 * ((openPrices[j - 37] + closePrices[j - 37] + highPrices[j - 37] + lowPrices[j - 37]) / 4.0 + openPrices[j - 37]) / 2.0 + 0.00968091 * ((openPrices[j - 38] + closePrices[j - 38] + highPrices[j - 38] + lowPrices[j - 38]) / 4.0 + openPrices[j - 38]) / 2.0 + 0.00987326 * ((openPrices[j - 39] + closePrices[j - 39] + highPrices[j - 39] + lowPrices[j - 39]) / 4.0 + openPrices[j - 39]) / 2.0 + 0.00966639 * ((openPrices[j - 40] + closePrices[j - 40] + highPrices[j - 40] + lowPrices[j - 40]) / 4.0 + openPrices[j - 40]) / 2.0 + 0.00910488 * ((openPrices[j - 41] + closePrices[j - 41] + highPrices[j - 41] + lowPrices[j - 41]) / 4.0 + openPrices[j - 41]) / 2.0 + 0.00824306 * ((openPrices[j - 42] + closePrices[j - 42] + highPrices[j - 42] + lowPrices[j - 42]) / 4.0 + openPrices[j - 42]) / 2.0 + 0.00714199 * ((openPrices[j - 43] + closePrices[j - 43] + highPrices[j - 43] + lowPrices[j - 43]) / 4.0 + openPrices[j - 43]) / 2.0 + 0.00586655 * ((openPrices[j - 44] + closePrices[j - 44] + highPrices[j - 44] + lowPrices[j - 44]) / 4.0 + openPrices[j - 44]) / 2.0 + 0.00448255 * ((openPrices[j - 45] + closePrices[j - 45] + highPrices[j - 45] + lowPrices[j - 45]) / 4.0 + openPrices[j - 45]) / 2.0 + 0.00305396 * ((openPrices[j - 46] + closePrices[j - 46] + highPrices[j - 46] + lowPrices[j - 46]) / 4.0 + openPrices[j - 46]) / 2.0 + 0.00164061 * ((openPrices[j - 47] + closePrices[j - 47] + highPrices[j - 47] + lowPrices[j - 47]) / 4.0 + openPrices[j - 47]) / 2.0 + 0.00029596 * ((openPrices[j - 48] + closePrices[j - 48] + highPrices[j - 48] + lowPrices[j - 48]) / 4.0 + openPrices[j - 48]) / 2.0 - 0.00093445 * ((openPrices[j - 49] + closePrices[j - 49] + highPrices[j - 49] + lowPrices[j - 49]) / 4.0 + openPrices[j - 49]) / 2.0 - 0.00201426 * ((openPrices[j - 50] + closePrices[j - 50] + highPrices[j - 50] + lowPrices[j - 50]) / 4.0 + openPrices[j - 50]) / 2.0 - 0.00291701 * ((openPrices[j - 51] + closePrices[j - 51] + highPrices[j - 51] + lowPrices[j - 51]) / 4.0 + openPrices[j - 51]) / 2.0 - 0.00362661 * ((openPrices[j - 52] + closePrices[j - 52] + highPrices[j - 52] + lowPrices[j - 52]) / 4.0 + openPrices[j - 52]) / 2.0 - 0.00413703 * ((openPrices[j - 53] + closePrices[j - 53] + highPrices[j - 53] + lowPrices[j - 53]) / 4.0 + openPrices[j - 53]) / 2.0 - 0.00445206 * ((openPrices[j - 54] + closePrices[j - 54] + highPrices[j - 54] + lowPrices[j - 54]) / 4.0 + openPrices[j - 54]) / 2.0 - 0.00458437 * ((openPrices[j - 55] + closePrices[j - 55] + highPrices[j - 55] + lowPrices[j - 55]) / 4.0 + openPrices[j - 55]) / 2.0 - 0.00455457 * ((openPrices[j - 56] + closePrices[j - 56] + highPrices[j - 56] + lowPrices[j - 56]) / 4.0 + openPrices[j - 56]) / 2.0 - 0.00439006 * ((openPrices[j - 57] + closePrices[j - 57] + highPrices[j - 57] + lowPrices[j - 57]) / 4.0 + openPrices[j - 57]) / 2.0 - 0.00412379 * ((openPrices[j - 58] + closePrices[j - 58] + highPrices[j - 58] + lowPrices[j - 58]) / 4.0 + openPrices[j - 58]) / 2.0 - 0.00379323 * ((openPrices[j - 59] + closePrices[j - 59] + highPrices[j - 59] + lowPrices[j - 59]) / 4.0 + openPrices[j - 59]) / 2.0 - 0.00343966 * ((openPrices[j - 60] + closePrices[j - 60] + highPrices[j - 60] + lowPrices[j - 60]) / 4.0 + openPrices[j - 60]) / 2.0 - 0.0031085 * ((openPrices[j - 61] + closePrices[j - 61] + highPrices[j - 61] + lowPrices[j - 61]) / 4.0 + openPrices[j - 61]) / 2.0 - 0.00285188 * ((openPrices[j - 62] + closePrices[j - 62] + highPrices[j - 62] + lowPrices[j - 62]) / 4.0 + openPrices[j - 62]) / 2.0 - 0.00273508 * ((openPrices[j - 63] + closePrices[j - 63] + highPrices[j - 63] + lowPrices[j - 63]) / 4.0 + openPrices[j - 63]) / 2.0 - 0.00274361 * ((openPrices[j - 64] + closePrices[j - 64] + highPrices[j - 64] + lowPrices[j - 64]) / 4.0 + openPrices[j - 64]) / 2.0 + 0.01018757 * ((openPrices[j - 65] + closePrices[j - 65] + highPrices[j - 65] + lowPrices[j - 65]) / 4.0 + openPrices[j - 65]) / 2.0;
				if (num > num2)
				{
					list.Add(1.0);
				}
				else if (num < num2)
				{
					list.Add(-1.0);
				}
				else
				{
					list.Add(0.0);
				}
			}
			return list;
		}

		// Token: 0x17000104 RID: 260
		public IContext Context
		{
			// Token: 0x06000303 RID: 771 RVA: 0x0001177B File Offset: 0x0000F97B
			get;
			// Token: 0x06000304 RID: 772 RVA: 0x00011783 File Offset: 0x0000F983
			set;
		}
	}
}
