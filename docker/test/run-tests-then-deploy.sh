#!/bin/bash
# Test-First Deployment Script
# –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã, –∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç production

set -e

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
cd "$(dirname "$0")/../.."

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_step() {
    echo -e "\n${BOLD}${BLUE}‚ñ∂ $1${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
echo ""
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë     üöÄ Test-First Deployment Pipeline           ‚ïë"
echo "‚ïë     Algo Robots Trading System                   ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""

# ====================================================================
# –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
# ====================================================================

log_step "–®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"

if ! command -v docker &> /dev/null; then
    log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

log_success "Docker –∏ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# ====================================================================
# –®–ê–ì 2: –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
# ====================================================================

log_step "–®–∞–≥ 2: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"

docker compose -f docker/test/docker-compose.test.yml down -v 2>/dev/null || true
log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# ====================================================================
# –®–ê–ì 3: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ====================================================================

log_step "–®–∞–≥ 3: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"

log_info "–ü–æ–¥–Ω–∏–º–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ë–î (ClickHouse, MongoDB, Redis)..."
docker compose -f docker/test/docker-compose.test.yml up -d clickhouse-test mongodb-test redis-test

log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (15 —Å–µ–∫)..."
sleep 15

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤..."

all_healthy=true

if docker ps --format '{{.Names}}\t{{.Status}}' | grep clickhouse-test | grep -q "healthy"; then
    log_success "ClickHouse (test) –≥–æ—Ç–æ–≤ - –ø–æ—Ä—Ç 9001"
else
    log_error "ClickHouse (test) –Ω–µ –≥–æ—Ç–æ–≤"
    all_healthy=false
fi

if docker ps --format '{{.Names}}\t{{.Status}}' | grep mongodb-test | grep -q "healthy"; then
    log_success "MongoDB (test) –≥–æ—Ç–æ–≤ - –ø–æ—Ä—Ç 27018"
else
    log_error "MongoDB (test) –Ω–µ –≥–æ—Ç–æ–≤"
    all_healthy=false
fi

if docker ps --format '{{.Names}}\t{{.Status}}' | grep redis-test | grep -q "healthy"; then
    log_success "Redis (test) –≥–æ—Ç–æ–≤ - –ø–æ—Ä—Ç 6380"
else
    log_warning "Redis (test) –Ω–µ –≥–æ—Ç–æ–≤ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)"
fi

if [ "$all_healthy" = false ]; then
    log_error "–ù–µ –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏:"
    echo "  docker compose -f docker/test/docker-compose.test.yml logs"
    exit 1
fi

log_success "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ"

# ====================================================================
# –®–ê–ì 4: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
# ====================================================================

log_step "–®–∞–≥ 4: –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"

log_info "–°–±–æ—Ä–∫–∞ test-runner –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
docker compose -f docker/test/docker-compose.test.yml build test-runner

echo ""
log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
echo ""

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏ –∑–∞—Ö–≤–∞—Ç exit code
set +e
docker compose -f docker/test/docker-compose.test.yml run --rm test-runner
TEST_EXIT_CODE=$?
set -e

echo ""
if [ $TEST_EXIT_CODE -eq 0 ]; then
    log_success "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! ‚ú®"
else
    log_error "–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ (–∫–æ–¥ –≤—ã—Ö–æ–¥–∞: $TEST_EXIT_CODE)"
    log_error "–î–µ–ø–ª–æ–π –æ—Ç–º–µ–Ω—ë–Ω!"
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    docker compose -f docker/test/docker-compose.test.yml down -v
    
    exit $TEST_EXIT_CODE
fi

# ====================================================================
# –®–ê–ì 5: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ====================================================================

log_step "–®–∞–≥ 5: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"

docker compose -f docker/test/docker-compose.test.yml down -v
log_success "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –æ—á–∏—â–µ–Ω–æ"

# ====================================================================
# –®–ê–ì 6: –ó–∞–ø—É—Å–∫ production –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ====================================================================

log_step "–®–∞–≥ 6: –ó–∞–ø—É—Å–∫ production –æ–∫—Ä—É–∂–µ–Ω–∏—è"

log_warning "–¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ó–∞–ø—É—Å–∫–∞–µ–º production..."
echo ""

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ docker –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
cd docker

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è production
if [ -f "start-infrastructure.sh" ]; then
    log_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç start-infrastructure.sh"
    ./start-infrastructure.sh
else
    log_info "–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ docker compose..."
    docker compose up -d
fi

# –í–æ–∑–≤—Ä–∞—Ç –≤ –∫–æ—Ä–µ–Ω—å
cd ..

# ====================================================================
# –®–ê–ì 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
# ====================================================================

log_step "–®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ production"

sleep 5

echo ""
log_info "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
docker compose -f docker/docker-compose.yml ps

echo ""
log_success "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
log_success "‚ïë   ‚ú® –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!                   ‚ïë"
log_success "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"

echo ""
log_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo "  üìä ClickHouse:  http://localhost:8123 (native: 9002)"
echo "  üì¶ MongoDB:     localhost:27017"
echo "  üíæ PostgreSQL:  localhost:5432"
echo "  üî¥ Redis:       localhost:6379"
echo "  üìà Grafana:     http://localhost:3000"
echo "  üéØ Prometheus:  http://localhost:9090"
echo "  üöÄ Application: localhost:8080"

echo ""
log_info "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  ‚Ä¢ –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:  docker logs -f trading-robot"
echo "  ‚Ä¢ –õ–æ–≥–∏ –≤—Å–µ—Ö:        docker compose -f docker/docker-compose.yml logs -f"
echo "  ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞:        cd docker && ./stop-infrastructure.sh"
echo "  ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: $0"

echo ""


