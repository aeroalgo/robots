//! –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Redis –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞

use crate::data_access::{
    database::RedisConnector,
    query_builder::{CacheQueryBuilder, QueueQueryBuilder, CounterQueryBuilder, KeyUtils},
    models::*,
    Cache, DataSource,
};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ Redis –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞");
    
    // –°–æ–∑–¥–∞–Ω–∏–µ Redis –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
    let mut redis = RedisConnector::new("localhost".to_string(), 6379);
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    println!("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...");
    redis.connect().await?;
    println!("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!");
    
    // –ü—Ä–∏–º–µ—Ä 1: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
    println!("\nüìä –ü—Ä–∏–º–µ—Ä 1: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã");
    let ticker = Ticker {
        symbol: "BTCUSDT".to_string(),
        price: 45000.0,
        bid: 44999.0,
        ask: 45001.0,
        volume: 1000.0,
        timestamp: chrono::Utc::now(),
    };
    
    let price_key = KeyUtils::price_key("BTCUSDT");
    redis.set(&price_key, &ticker, Some(60)).await?;
    println!("üíæ –¶–µ–Ω–∞ BTCUSDT —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫—ç—à");
    
    let cached_ticker: Option<Ticker> = redis.get(&price_key).await?;
    if let Some(ticker) = cached_ticker {
        println!("üìà –ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞: ${}", ticker.price);
    }
    
    // –ü—Ä–∏–º–µ—Ä 2: –†–∞–±–æ—Ç–∞ —Å –æ—á–µ—Ä–µ–¥—è–º–∏
    println!("\nüì® –ü—Ä–∏–º–µ—Ä 2: –†–∞–±–æ—Ç–∞ —Å –æ—á–µ—Ä–µ–¥—è–º–∏");
    let command_queue = KeyUtils::command_queue_key("rsi_strategy");
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ –æ—á–µ—Ä–µ–¥—å
    redis.lpush(&command_queue, &"BUY:BTCUSDT:100").await?;
    redis.lpush(&command_queue, &"SELL:ETHUSDT:50").await?;
    redis.lpush(&command_queue, &"HOLD:ADAUSDT:0").await?;
    
    println!("üìù –î–æ–±–∞–≤–ª–µ–Ω–æ 3 –∫–æ–º–∞–Ω–¥—ã –≤ –æ—á–µ—Ä–µ–¥—å");
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
    let queue_size = redis.llen(&command_queue).await?;
    println!("üìä –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {}", queue_size);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    let commands: Vec<String> = redis.lrange(&command_queue, 0, -1).await?;
    println!("üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã: {:?}", commands);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    let command: Option<String> = redis.rpop(&command_queue).await?;
    if let Some(cmd) = command {
        println!("üéØ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {}", cmd);
    }
    
    // –ü—Ä–∏–º–µ—Ä 3: –†–∞–±–æ—Ç–∞ —Å–æ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
    println!("\nüî¢ –ü—Ä–∏–º–µ—Ä 3: –†–∞–±–æ—Ç–∞ —Å–æ —Å—á–µ—Ç—á–∏–∫–∞–º–∏");
    let trades_counter = KeyUtils::counter_key("trades");
    
    // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞
    let count1 = redis.increment(&trades_counter).await?;
    let count2 = redis.increment(&trades_counter).await?;
    let count3 = redis.increment(&trades_counter).await?;
    
    println!("üìà –°—á–µ—Ç—á–∏–∫ —Å–¥–µ–ª–æ–∫: {} -> {} -> {}", count1, count2, count3);
    
    // –ü—Ä–∏–º–µ—Ä 4: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    println!("\nüìä –ü—Ä–∏–º–µ—Ä 4: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞");
    let signal = TradingSignal {
        id: "signal_001".to_string(),
        strategy_id: "rsi_strategy".to_string(),
        symbol: "BTCUSDT".to_string(),
        signal_type: SignalType::Buy,
        confidence: 0.85,
        price: 45000.0,
        timestamp: chrono::Utc::now(),
        metadata: Some(serde_json::json!({
            "rsi_value": 25.5,
            "volume": 100.5
        })),
    };
    
    let signal_key = KeyUtils::signal_key("rsi_strategy", "BTCUSDT");
    redis.set(&signal_key, &signal, Some(300)).await?; // TTL 5 –º–∏–Ω—É—Ç
    println!("üíæ –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
    
    let cached_signal: Option<TradingSignal> = redis.get(&signal_key).await?;
    if let Some(signal) = cached_signal {
        println!("üìà –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {:?} —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {:.2}", 
                signal.signal_type, signal.confidence);
    }
    
    // –ü—Ä–∏–º–µ—Ä 5: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Query Builder
    println!("\nüîß –ü—Ä–∏–º–µ—Ä 5: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Query Builder");
    
    // Cache Query Builder
    let cache_query = CacheQueryBuilder::new()
        .cache("user:123", &"John Doe", Some(3600))
        .get_cached("user:123")
        .exists_cached("user:123");
    
    println!("üìã Cache Query Builder —Å–æ–∑–¥–∞–Ω —Å {} –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏", cache_query.operations().len());
    
    // Queue Query Builder
    let queue_query = QueueQueryBuilder::new()
        .enqueue("notifications", &"–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª!")
        .enqueue("notifications", &"–û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω!")
        .size("notifications");
    
    println!("üìã Queue Query Builder —Å–æ–∑–¥–∞–Ω —Å {} –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏", queue_query.operations().len());
    
    // Counter Query Builder
    let counter_query = CounterQueryBuilder::new()
        .increment("api_calls")
        .increment("api_calls")
        .get_value("api_calls");
    
    println!("üìã Counter Query Builder —Å–æ–∑–¥–∞–Ω —Å {} –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏", counter_query.operations().len());
    
    // –ü—Ä–∏–º–µ—Ä 6: –†–∞–±–æ—Ç–∞ —Å —Å–µ—Å—Å–∏—è–º–∏
    println!("\nüë§ –ü—Ä–∏–º–µ—Ä 6: –†–∞–±–æ—Ç–∞ —Å —Å–µ—Å—Å–∏—è–º–∏");
    let session_key = KeyUtils::session_key("user123");
    let session_data = serde_json::json!({
        "user_id": "user123",
        "username": "trader",
        "last_login": chrono::Utc::now(),
        "permissions": ["read", "write", "trade"]
    });
    
    redis.set(&session_key, &session_data, Some(3600)).await?; // TTL 1 —á–∞—Å
    println!("üîê –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞");
    
    let cached_session: Option<serde_json::Value> = redis.get(&session_key).await?;
    if let Some(session) = cached_session {
        println!("üë§ –ü–æ–ª—É—á–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {}", session["username"]);
    }
    
    // –ü—Ä–∏–º–µ—Ä 7: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    println!("\nüîí –ü—Ä–∏–º–µ—Ä 7: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏");
    let lock_key = KeyUtils::lock_key("strategy_1");
    
    // –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    let lock_set = redis.set_string(&lock_key, "locked", Some(10)).await?;
    println!("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {:?}", lock_set);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    let is_locked = redis.exists(&lock_key).await?;
    println!("üîç –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: {}", is_locked);
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    println!("\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Redis...");
    redis.disconnect().await?;
    println!("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!");
    
    println!("\nüéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    Ok(())
}
