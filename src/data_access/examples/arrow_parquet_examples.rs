//! –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Arrow/Parquet –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤

use crate::data_access::database::*;
use crate::data_access::models::*;
use crate::data_access::query_builder::*;
use crate::data_access::traits::DataSource;
use crate::data_access::{DataAccessError, Result};

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Arrow Flight –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
pub async fn arrow_flight_example() -> Result<()> {
    println!("=== Arrow Flight Example ===");

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let config = ArrowFlightConfig {
        host: "localhost".to_string(),
        port: 8815,
        timeout_seconds: 30,
        max_retries: 3,
        batch_size: 1000,
        compression_enabled: true,
    };

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
    let mut connector = ArrowFlightConnector::new(config);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    connector.connect().await?;
    println!("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Arrow Flight Server");

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    let query = ArrowFlightUtils::create_candles_query("BTCUSDT", "2024-01-01", "2024-01-31");

    let batches = connector.get_data(&query).await?;
    println!("üìä –ü–æ–ª—É—á–µ–Ω–æ {} –±–∞—Ç—á–µ–π –¥–∞–Ω–Ω—ã—Ö", batches.len());

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã
    let schema = connector.get_schema(&query).await?;
    println!("üìã –°—Ö–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö: {}", schema);

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    connector.disconnect().await?;
    println!("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Arrow Flight Server");

    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Parquet –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
pub async fn parquet_example() -> Result<()> {
    println!("=== Parquet Example ===");

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let config = ParquetConfig {
        base_path: "./data/parquet".to_string(),
        compression: ParquetCompression::Snappy,
        batch_size: 1000,
        max_file_size: 100 * 1024 * 1024, // 100MB
        create_directories: true,
    };

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
    let mut connector = ParquetConnector::new(config);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    connector.connect().await?;
    println!("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Parquet —Ö—Ä–∞–Ω–∏–ª–∏—â—É");

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    let test_candles = vec![
        Candle {
            timestamp: chrono::Utc::now(),
            symbol: "BTCUSDT".to_string(),
            open: 50000.0,
            high: 51000.0,
            low: 49000.0,
            close: 50500.0,
            volume: 1000.0,
        },
        Candle {
            timestamp: chrono::Utc::now(),
            symbol: "ETHUSDT".to_string(),
            open: 3000.0,
            high: 3100.0,
            low: 2900.0,
            close: 3050.0,
            volume: 2000.0,
        },
    ];

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    let file_path = ParquetUtils::create_candles_path("BTCUSDT", "2024-01-01");

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Vec<Candle> –≤ RecordBatch (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    let batches = vec![]; // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è

    connector.write_parquet(&file_path, batches).await?;
    println!("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {}", file_path);

    // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    let read_batches = connector.read_parquet(&file_path).await?;
    println!("üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {} –±–∞—Ç—á–µ–π –∏–∑ —Ñ–∞–π–ª–∞", read_batches.len());

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    let metadata = connector.get_metadata(&file_path).await?;
    println!("üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞:");
    println!("   - –ü—É—Ç—å: {}", metadata.file_path);
    println!("   - –†–∞–∑–º–µ—Ä: {} –±–∞–π—Ç", metadata.file_size);
    println!("   - –°—Ç—Ä–æ–∫: {}", metadata.num_rows);
    println!("   - –ö–æ–ª–æ–Ω–æ–∫: {}", metadata.num_columns);

    // –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    let files = connector.list_files("candles").await?;
    println!("üìÅ –ù–∞–π–¥–µ–Ω–æ {} —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ candles", files.len());

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    connector.disconnect().await?;
    println!("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Parquet —Ö—Ä–∞–Ω–∏–ª–∏—â–∞");

    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è DataFusion –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
pub async fn datafusion_example() -> Result<()> {
    println!("=== DataFusion Example ===");

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let config = DataFusionConfig {
        memory_limit: 1024 * 1024 * 1024, // 1GB
        max_concurrent_queries: 10,
        enable_optimization: true,
        enable_parallel_execution: true,
        cache_size: 100,
        temp_dir: Some("./temp".to_string()),
    };

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
    let mut connector = DataFusionConnector::new(config);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    connector.connect().await?;
    println!("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ DataFusion");

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ Parquet —Ñ–∞–π–ª–∞
    let table_name = "candles";
    let file_path = "./data/parquet/candles/BTCUSDT/2024-01-01.parquet";

    connector
        .register_parquet_table(table_name, file_path)
        .await?;
    println!("üìã –¢–∞–±–ª–∏—Ü–∞ {} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞", table_name);

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞
    let sql =
        "SELECT symbol, AVG(close) as avg_price, COUNT(*) as count FROM candles GROUP BY symbol";
    let batches = connector.execute_sql(sql).await?;
    println!("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç SQL –∑–∞–ø—Ä–æ—Å–∞: {} –±–∞—Ç—á–µ–π", batches.len());

    // –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    let analytics_query = DataFusionUtils::create_candles_analysis_query(
        "BTCUSDT",
        "2024-01-01",
        "2024-01-31",
        &["AVG(close)", "MAX(high)", "MIN(low)"],
    );

    let analytics_batches = connector.execute_analytics_query(&analytics_query).await?;
    println!(
        "üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {} –±–∞—Ç—á–µ–π",
        analytics_batches.len()
    );

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    let stats = connector.get_table_stats(table_name).await?;
    println!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü—ã {}:", stats.table_name);
    println!("   - –°—Ç—Ä–æ–∫: {}", stats.row_count);
    println!("   - –ö–æ–ª–æ–Ω–æ–∫: {}", stats.column_count);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã
    let schema = connector.get_table_schema(table_name).await?;
    println!("üìã –°—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã: {} –ø–æ–ª–µ–π", schema.fields().len());

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    connector.disconnect().await?;
    println!("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç DataFusion");

    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Arrow Query Builder
pub async fn arrow_query_builder_example() -> Result<()> {
    println!("=== Arrow Query Builder Example ===");

    // –ë–∞–∑–æ–≤—ã–π Query Builder
    let query = ArrowQueryBuilder::new("candles")
        .select(&["timestamp", "symbol", "close"])
        .where_equal("symbol", FilterValue::String("BTCUSDT".to_string()))
        .where_greater_than("close", FilterValue::Number(50000.0))
        .order_by("timestamp", SortDirection::Asc)
        .limit(100)
        .build()?;

    println!("üìù –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {}", query);

    // Query Builder —Å –∞–≥—Ä–µ–≥–∞—Ü–∏—è–º–∏
    let agg_query = ArrowQueryBuilder::new("candles")
        .avg("close", Some("avg_close"))
        .max("high", Some("max_high"))
        .min("low", Some("min_low"))
        .count("timestamp", Some("count"))
        .group_by(&["symbol"])
        .order_by("avg_close", SortDirection::Desc)
        .build()?;

    println!("üìä –ó–∞–ø—Ä–æ—Å —Å –∞–≥—Ä–µ–≥–∞—Ü–∏—è–º–∏: {}", agg_query);

    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Query Builder –¥–ª—è —Å–≤–µ—á–µ–π
    let candle_query = CandleArrowQueryBuilder::new()
        .by_symbol("BTCUSDT")
        .by_time_range("2024-01-01", "2024-01-31")
        .ohlcv()
        .order_by_time(SortDirection::Asc)
        .build()?;

    println!("üïØÔ∏è –ó–∞–ø—Ä–æ—Å —Å–≤–µ—á–µ–π: {}", candle_query);

    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Query Builder –¥–ª—è —Å–¥–µ–ª–æ–∫
    let trade_query = TradeArrowQueryBuilder::new()
        .by_symbol("BTCUSDT")
        .by_side("Buy")
        .recent(50)
        .build()?;

    println!("üí∞ –ó–∞–ø—Ä–æ—Å —Å–¥–µ–ª–æ–∫: {}", trade_query);

    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Query Builder –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–æ–≤
    let backtest_query = BacktestArrowQueryBuilder::new()
        .by_strategy("strategy_1")
        .min_sharpe(1.0)
        .top_results(10)
        .build()?;

    println!("üìà –ó–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–æ–≤: {}", backtest_query);

    // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    let utils_query = ArrowQueryUtils::create_candles_analysis_query(
        "BTCUSDT",
        "2024-01-01",
        "2024-01-31",
        &["AVG(close)", "MAX(high)", "MIN(low)"],
    )?;

    println!("üîß –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—ã: {}", utils_query);

    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Arrow/Parquet –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
pub async fn comprehensive_example() -> Result<()> {
    println!("=== Comprehensive Arrow/Parquet Example ===");

    // 1. –°–æ–∑–¥–∞–Ω–∏–µ Parquet —Ñ–∞–π–ª–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    println!("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ Parquet —Ñ–∞–π–ª–æ–≤...");

    let parquet_config = ParquetConfig::default();
    let mut parquet_connector = ParquetConnector::new(parquet_config);
    parquet_connector.connect().await?;

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    let symbols = vec!["BTCUSDT", "ETHUSDT", "ADAUSDT"];
    let dates = vec!["2024-01-01", "2024-01-02", "2024-01-03"];

    for symbol in &symbols {
        for date in &dates {
            let file_path = ParquetUtils::create_candles_path(symbol, date);

            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–≤–µ—á–µ–π
            let test_candles = vec![Candle {
                timestamp: chrono::Utc::now(),
                symbol: symbol.to_string(),
                open: 50000.0,
                high: 51000.0,
                low: 49000.0,
                close: 50500.0,
                volume: 1000.0,
            }];

            // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ RecordBatch (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            let batches = vec![];

            parquet_connector.write_parquet(&file_path, batches).await?;
            println!("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {}", file_path);
        }
    }

    // 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DataFusion –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    println!("üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DataFusion –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...");

    let datafusion_config = DataFusionConfig::default();
    let mut datafusion_connector = DataFusionConnector::new(datafusion_config);
    datafusion_connector.connect().await?;

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    for symbol in &symbols {
        for date in &dates {
            let table_name = format!("candles_{}_{}", symbol, date.replace("-", "_"));
            let file_path = ParquetUtils::create_candles_path(symbol, date);

            datafusion_connector
                .register_parquet_table(&table_name, &file_path)
                .await?;
            println!("üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {}", table_name);
        }
    }

    // 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    println!("üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...");

    // –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    for symbol in &symbols {
        let sql = format!(
            "SELECT '{}' as symbol, AVG(close) as avg_price, MAX(high) as max_high, MIN(low) as min_low FROM candles_{}_2024_01_01",
            symbol, symbol
        );

        let batches = datafusion_connector.execute_sql(&sql).await?;
        println!("üìà –ê–Ω–∞–ª–∏–∑ {}: {} –±–∞—Ç—á–µ–π", symbol, batches.len());
    }

    // –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    let comparison_sql = "
        SELECT 
            symbol,
            AVG(close) as avg_price,
            STDDEV(close) as price_volatility,
            COUNT(*) as data_points
        FROM (
            SELECT 'BTCUSDT' as symbol, close FROM candles_BTCUSDT_2024_01_01
            UNION ALL
            SELECT 'ETHUSDT' as symbol, close FROM candles_ETHUSDT_2024_01_01
            UNION ALL
            SELECT 'ADAUSDT' as symbol, close FROM candles_ADAUSDT_2024_01_01
        ) combined
        GROUP BY symbol
        ORDER BY avg_price DESC
    ";

    let comparison_batches = datafusion_connector.execute_sql(comparison_sql).await?;
    println!(
        "üîÑ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {} –±–∞—Ç—á–µ–π",
        comparison_batches.len()
    );

    // 4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Arrow Flight –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
    println!("üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Arrow Flight –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö...");

    let arrow_config = ArrowFlightConfig::default();
    let mut arrow_connector = ArrowFlightConnector::new(arrow_config);
    arrow_connector.connect().await?;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Arrow Flight
    let flight_query = "SELECT * FROM candles_BTCUSDT_2024_01_01 LIMIT 10";
    let flight_batches = arrow_connector.get_data(flight_query).await?;
    println!(
        "‚úàÔ∏è –ü–æ–ª—É—á–µ–Ω–æ {} –±–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ Arrow Flight",
        flight_batches.len()
    );

    // 5. –û—á–∏—Å—Ç–∫–∞
    println!("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...");

    arrow_connector.disconnect().await?;
    datafusion_connector.disconnect().await?;
    parquet_connector.disconnect().await?;

    println!("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");

    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤
pub async fn specialized_connectors_example() -> Result<()> {
    println!("=== Specialized Connectors Example ===");

    // Candle Parquet Connector
    println!("üïØÔ∏è Candle Parquet Connector...");
    let candle_parquet_config = ParquetConfig::default();
    let mut candle_parquet = CandleParquetConnector::new(candle_parquet_config);
    candle_parquet.base_connector.connect().await?;

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–µ—á–µ–π
    let test_candles = vec![Candle {
        timestamp: chrono::Utc::now(),
        symbol: "BTCUSDT".to_string(),
        open: 50000.0,
        high: 51000.0,
        low: 49000.0,
        close: 50500.0,
        volume: 1000.0,
    }];

    candle_parquet
        .save_candles("BTCUSDT", "2024-01-01", test_candles)
        .await?;
    println!("üíæ –°–≤–µ—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–µ–π
    let loaded_candles = candle_parquet.load_candles("BTCUSDT", "2024-01-01").await?;
    println!("üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —Å–≤–µ—á–µ–π", loaded_candles.len());

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
    let available_dates = candle_parquet.get_available_dates("BTCUSDT").await?;
    println!("üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã: {:?}", available_dates);

    // Candle Analytics Connector
    println!("üìä Candle Analytics Connector...");
    let candle_analytics_config = DataFusionConfig::default();
    let mut candle_analytics = CandleAnalyticsConnector::new(candle_analytics_config);
    candle_analytics.base_connector.connect().await?;

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
    candle_analytics
        .register_candles_table(
            "candles",
            "./data/parquet/candles/BTCUSDT/2024-01-01.parquet",
        )
        .await?;

    // –ê–Ω–∞–ª–∏–∑ —Å–≤–µ—á–µ–π
    let analysis_batches = candle_analytics
        .analyze_candles(
            "BTCUSDT",
            "2024-01-01",
            "2024-01-31",
            &["AVG(close)", "MAX(high)", "MIN(low)"],
        )
        .await?;
    println!("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {} –±–∞—Ç—á–µ–π", analysis_batches.len());

    // –†–∞—Å—á–µ—Ç —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
    let ma_batches = candle_analytics
        .calculate_moving_averages("BTCUSDT", &[5, 10, 20])
        .await?;
    println!("üìä –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ: {} –±–∞—Ç—á–µ–π", ma_batches.len());

    // –ü–æ–∏—Å–∫ —Å–≤–µ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    let pattern_batches = candle_analytics
        .find_candle_patterns("BTCUSDT", "doji", 10)
        .await?;
    println!("üîç –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {} –±–∞—Ç—á–µ–π", pattern_batches.len());

    // Backtest Analytics Connector
    println!("üìà Backtest Analytics Connector...");
    let backtest_analytics_config = DataFusionConfig::default();
    let mut backtest_analytics = BacktestAnalyticsConnector::new(backtest_analytics_config);
    backtest_analytics.base_connector.connect().await?;

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–æ–≤
    backtest_analytics
        .register_backtest_table(
            "backtest_results",
            "./data/parquet/backtests/strategy_1/2024-01-01.parquet",
        )
        .await?;

    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    let performance_batches = backtest_analytics
        .analyze_strategy_performance("strategy_1")
        .await?;
    println!(
        "üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {} –±–∞—Ç—á–µ–π",
        performance_batches.len()
    );

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    let comparison_batches = backtest_analytics
        .compare_strategies(&["strategy_1", "strategy_2"])
        .await?;
    println!(
        "üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {} –±–∞—Ç—á–µ–π",
        comparison_batches.len()
    );

    // –û—á–∏—Å—Ç–∫–∞
    candle_parquet.base_connector.disconnect().await?;
    candle_analytics.base_connector.disconnect().await?;
    backtest_analytics.base_connector.disconnect().await?;

    println!("‚úÖ –ü—Ä–∏–º–µ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!");

    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_arrow_query_builder_example() {
        let result = arrow_query_builder_example().await;
        assert!(result.is_ok());
    }

    #[tokio::test]
    async fn test_parquet_example() {
        let result = parquet_example().await;
        assert!(result.is_ok());
    }

    #[tokio::test]
    async fn test_datafusion_example() {
        let result = datafusion_example().await;
        assert!(result.is_ok());
    }

    #[tokio::test]
    async fn test_comprehensive_example() {
        let result = comprehensive_example().await;
        assert!(result.is_ok());
    }

    #[tokio::test]
    async fn test_specialized_connectors_example() {
        let result = specialized_connectors_example().await;
        assert!(result.is_ok());
    }
}
