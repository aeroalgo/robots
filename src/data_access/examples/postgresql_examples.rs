//! –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PostgreSQL –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞

use crate::data_access::database::postgresql::{
    PostgreSQLConfig, PostgreSQLConnector, PostgreSQLUtils,
};
use crate::data_access::models::*;
use crate::data_access::query_builder::postgresql::{
    BacktestQueryBuilder, CandleQueryBuilder, PostgreSQLQueryBuilder, StrategyQueryBuilder,
    TradeQueryBuilder, UserQueryBuilder,
};
use crate::data_access::traits::{DataSource, Database};
use chrono::{DateTime, Utc};

/// –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å PostgreSQL
pub async fn basic_postgresql_operations() -> Result<(), Box<dyn std::error::Error>> {
    println!("üîß –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å PostgreSQL");

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    let mut connector = PostgreSQLConnector::new_default();

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connector.connect().await?;
    println!("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    connector.create_tables().await?;
    println!("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã");

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    connector.create_indexes().await?;
    println!("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã");

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connector.ping().await?;
    println!("‚úÖ Ping —É—Å–ø–µ—à–µ–Ω");

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    let stats = connector.get_database_stats().await?;
    println!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:");
    for (table, count) in stats {
        println!("  {}: {} –∑–∞–ø–∏—Å–µ–π", table, count);
    }

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    connector.disconnect().await?;
    println!("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç PostgreSQL");

    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä 2: CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
pub async fn user_crud_operations() -> Result<(), Box<dyn std::error::Error>> {
    println!("üë§ –ü—Ä–∏–º–µ—Ä 2: CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏");

    let mut connector = PostgreSQLConnector::new_default();
    connector.connect().await?;
    connector.create_tables().await?;

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = User {
        id: "user_001".to_string(),
        username: "trader_john".to_string(),
        email: "john@example.com".to_string(),
        created_at: Utc::now(),
        updated_at: Utc::now(),
    };

    let insert_query = PostgreSQLQueryBuilder::new()
        .insert_into(
            "users",
            &["id", "username", "email", "created_at", "updated_at"],
        )
        .values(&[
            &user.id,
            &user.username,
            &user.email,
            &user.created_at.format("%Y-%m-%d %H:%M:%S").to_string(),
            &user.updated_at.format("%Y-%m-%d %H:%M:%S").to_string(),
        ])
        .build()?;

    println!("üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ INSERT –∑–∞–ø—Ä–æ—Å–∞: {}", insert_query);
    connector.execute(&insert_query).await?;
    println!("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω");

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
    let select_query = UserQueryBuilder::new().by_username("trader_john").build()?;

    println!("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT –∑–∞–ø—Ä–æ—Å–∞: {}", select_query);
    let users: Vec<User> = connector.query(&select_query).await?;
    println!("‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}", users.len());
    for user in users {
        println!("  üë§ {} ({})", user.username, user.email);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let update_query = PostgreSQLQueryBuilder::new()
        .update("users")
        .set("email", "'john.updated@example.com'")
        .where_eq("username", "'trader_john'")
        .build()?;

    println!("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ UPDATE –∑–∞–ø—Ä–æ—Å–∞: {}", update_query);
    let rows_affected = connector.execute(&update_query).await?;
    println!("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {}", rows_affected);

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let delete_query = PostgreSQLQueryBuilder::new()
        .delete_from("users")
        .where_eq("username", "'trader_john'")
        .build()?;

    println!("üóëÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ DELETE –∑–∞–ø—Ä–æ—Å–∞: {}", delete_query);
    let rows_affected = connector.execute(&delete_query).await?;
    println!("‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {}", rows_affected);

    connector.disconnect().await?;
    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä 3: –†–∞–±–æ—Ç–∞ —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
pub async fn trading_data_operations() -> Result<(), Box<dyn std::error::Error>> {
    println!("üìà –ü—Ä–∏–º–µ—Ä 3: –†–∞–±–æ—Ç–∞ —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏");

    let mut connector = PostgreSQLConnector::new_default();
    connector.connect().await?;
    connector.create_tables().await?;

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    let strategy = Strategy {
        id: "strategy_001".to_string(),
        name: "Moving Average Crossover".to_string(),
        description: Some("–ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö".to_string()),
        parameters: serde_json::json!({
            "short_period": 10,
            "long_period": 30,
            "threshold": 0.01
        }),
        enabled: true,
        created_at: Utc::now(),
        updated_at: Utc::now(),
    };

    let strategy_query = PostgreSQLQueryBuilder::new()
        .insert_into(
            "strategies",
            &[
                "id",
                "name",
                "description",
                "parameters",
                "enabled",
                "created_at",
                "updated_at",
            ],
        )
        .values(&[
            &strategy.id,
            &strategy.name,
            &strategy.description.as_ref().unwrap(),
            &strategy.parameters.to_string(),
            "true",
            &strategy.created_at.format("%Y-%m-%d %H:%M:%S").to_string(),
            &strategy.updated_at.format("%Y-%m-%d %H:%M:%S").to_string(),
        ])
        .build()?;

    connector.execute(&strategy_query).await?;
    println!("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞");

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π
    let candles = vec![
        Candle {
            timestamp: Utc::now(),
            symbol: "BTCUSDT".to_string(),
            open: 50000.0,
            high: 51000.0,
            low: 49500.0,
            close: 50500.0,
            volume: 100.5,
        },
        Candle {
            timestamp: Utc::now(),
            symbol: "ETHUSDT".to_string(),
            open: 3000.0,
            high: 3100.0,
            low: 2950.0,
            close: 3050.0,
            volume: 500.0,
        },
    ];

    for candle in candles {
        let candle_query = PostgreSQLQueryBuilder::new()
            .insert_into(
                "candles",
                &[
                    "timestamp",
                    "symbol",
                    "open",
                    "high",
                    "low",
                    "close",
                    "volume",
                ],
            )
            .values(&[
                &candle.timestamp.format("%Y-%m-%d %H:%M:%S").to_string(),
                &candle.symbol,
                &candle.open.to_string(),
                &candle.high.to_string(),
                &candle.low.to_string(),
                &candle.close.to_string(),
                &candle.volume.to_string(),
            ])
            .build()?;

        connector.execute(&candle_query).await?;
    }
    println!("‚úÖ –°–≤–µ—á–∏ —Å–æ–∑–¥–∞–Ω—ã");

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫
    let trades = vec![
        Trade {
            id: "trade_001".to_string(),
            timestamp: Utc::now(),
            symbol: "BTCUSDT".to_string(),
            price: 50500.0,
            quantity: 0.1,
            side: TradeSide::Buy,
            order_id: Some("order_001".to_string()),
        },
        Trade {
            id: "trade_002".to_string(),
            timestamp: Utc::now(),
            symbol: "ETHUSDT".to_string(),
            price: 3050.0,
            quantity: 1.0,
            side: TradeSide::Sell,
            order_id: Some("order_002".to_string()),
        },
    ];

    for trade in trades {
        let trade_query = PostgreSQLQueryBuilder::new()
            .insert_into(
                "trades",
                &[
                    "id",
                    "timestamp",
                    "symbol",
                    "price",
                    "quantity",
                    "side",
                    "order_id",
                ],
            )
            .values(&[
                &trade.id,
                &trade.timestamp.format("%Y-%m-%d %H:%M:%S").to_string(),
                &trade.symbol,
                &trade.price.to_string(),
                &trade.quantity.to_string(),
                &format!("'{:?}'", trade.side),
                &trade.order_id.as_ref().unwrap(),
            ])
            .build()?;

        connector.execute(&trade_query).await?;
    }
    println!("‚úÖ –°–¥–µ–ª–∫–∏ —Å–æ–∑–¥–∞–Ω—ã");

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—ç–∫—Ç–µ—Å—Ç–∞
    let backtest_result = BacktestResult {
        strategy_id: "strategy_001".to_string(),
        symbol: "BTCUSDT".to_string(),
        start_date: Utc::now(),
        end_date: Utc::now(),
        total_return: 0.15,
        sharpe_ratio: 1.8,
        max_drawdown: 0.05,
        total_trades: 100,
        winning_trades: 65,
        losing_trades: 35,
        win_rate: 0.65,
        created_at: Utc::now(),
    };

    let backtest_query = PostgreSQLQueryBuilder::new()
        .insert_into(
            "backtest_results",
            &[
                "strategy_id",
                "symbol",
                "start_date",
                "end_date",
                "total_return",
                "sharpe_ratio",
                "max_drawdown",
                "total_trades",
                "winning_trades",
                "losing_trades",
                "win_rate",
                "created_at",
            ],
        )
        .values(&[
            &backtest_result.strategy_id,
            &backtest_result.symbol,
            &backtest_result
                .start_date
                .format("%Y-%m-%d %H:%M:%S")
                .to_string(),
            &backtest_result
                .end_date
                .format("%Y-%m-%d %H:%M:%S")
                .to_string(),
            &backtest_result.total_return.to_string(),
            &backtest_result.sharpe_ratio.to_string(),
            &backtest_result.max_drawdown.to_string(),
            &backtest_result.total_trades.to_string(),
            &backtest_result.winning_trades.to_string(),
            &backtest_result.losing_trades.to_string(),
            &backtest_result.win_rate.to_string(),
            &backtest_result
                .created_at
                .format("%Y-%m-%d %H:%M:%S")
                .to_string(),
        ])
        .build()?;

    connector.execute(&backtest_query).await?;
    println!("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—ç–∫—Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω");

    connector.disconnect().await?;
    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä 4: –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å Query Builder
pub async fn complex_queries() -> Result<(), Box<dyn std::error::Error>> {
    println!("üîç –ü—Ä–∏–º–µ—Ä 4: –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å Query Builder");

    let mut connector = PostgreSQLConnector::new_default();
    connector.connect().await?;
    connector.create_tables().await?;

    // –ó–∞–ø—Ä–æ—Å —Å–≤–µ—á–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–∏–º–≤–æ–ª—É
    let candle_query = CandleQueryBuilder::new()
        .by_symbol("BTCUSDT")
        .time_range(Utc::now() - chrono::Duration::days(7), Utc::now())
        .min_volume(100.0)
        .order_by_timestamp()
        .build()?;

    println!("üìä –ó–∞–ø—Ä–æ—Å —Å–≤–µ—á–µ–π: {}", candle_query);

    // –ó–∞–ø—Ä–æ—Å —Å–¥–µ–ª–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç–æ—Ä–æ–Ω–µ
    let trade_query = TradeQueryBuilder::new()
        .by_symbol("BTCUSDT")
        .by_side(TradeSide::Buy)
        .price_range(50000.0, 51000.0)
        .order_by_timestamp()
        .build()?;

    println!("üí∞ –ó–∞–ø—Ä–æ—Å —Å–¥–µ–ª–æ–∫: {}", trade_query);

    // –ó–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    let backtest_query = BacktestQueryBuilder::new()
        .by_strategy("strategy_001")
        .min_return(0.1)
        .min_sharpe(1.5)
        .max_drawdown(0.1)
        .order_by_return()
        .build()?;

    println!("üìà –ó–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–æ–≤: {}", backtest_query);

    // –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É
    let strategy_query = StrategyQueryBuilder::new()
        .enabled_only()
        .by_name("Moving Average")
        .order_by_created_at()
        .build()?;

    println!("üéØ –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {}", strategy_query);

    connector.disconnect().await?;
    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä 5: –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
pub async fn analytical_queries() -> Result<(), Box<dyn std::error::Error>> {
    println!("üìä –ü—Ä–∏–º–µ—Ä 5: –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã");

    let mut connector = PostgreSQLConnector::new_default();
    connector.connect().await?;
    connector.create_tables().await?;

    // –¢–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    let top_strategies_query =
        crate::data_access::query_builder::postgresql::PostgreSQLUtils::top_strategies_by_return(
            10,
        )?;
    println!("üèÜ –¢–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {}", top_strategies_query);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    let symbol_stats_query =
        crate::data_access::query_builder::postgresql::PostgreSQLUtils::symbol_statistics()?;
    println!("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º: {}", symbol_stats_query);

    // –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤
    let daily_stats_query =
        crate::data_access::query_builder::postgresql::PostgreSQLUtils::daily_trading_stats()?;
    println!("üìÖ –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤: {}", daily_stats_query);

    // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    let active_users_query =
        crate::data_access::query_builder::postgresql::PostgreSQLUtils::active_users(30)?;
    println!("üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {}", active_users_query);

    // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    let strategy_performance_query =
        crate::data_access::query_builder::postgresql::PostgreSQLUtils::strategy_performance()?;
    println!(
        "üéØ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {}",
        strategy_performance_query
    );

    connector.disconnect().await?;
    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä 6: –†–∞–±–æ—Ç–∞ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
pub async fn transaction_operations() -> Result<(), Box<dyn std::error::Error>> {
    println!("üîÑ –ü—Ä–∏–º–µ—Ä 6: –†–∞–±–æ—Ç–∞ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏");

    let mut connector = PostgreSQLConnector::new_default();
    connector.connect().await?;
    connector.create_tables().await?;

    // –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    let transaction = connector.begin_transaction().await?;
    println!("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞—á–∞—Ç–∞");

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    let insert_user_query = PostgreSQLQueryBuilder::new()
        .insert_into(
            "users",
            &["id", "username", "email", "created_at", "updated_at"],
        )
        .values(&[
            "user_tx_001",
            "transaction_user",
            "tx@example.com",
            &Utc::now().format("%Y-%m-%d %H:%M:%S").to_string(),
            &Utc::now().format("%Y-%m-%d %H:%M:%S").to_string(),
        ])
        .build()?;

    transaction.execute(&insert_user_query).await?;
    println!("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");

    let insert_strategy_query = PostgreSQLQueryBuilder::new()
        .insert_into(
            "strategies",
            &[
                "id",
                "name",
                "description",
                "enabled",
                "created_at",
                "updated_at",
            ],
        )
        .values(&[
            "strategy_tx_001",
            "Transaction Strategy",
            "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
            "true",
            &Utc::now().format("%Y-%m-%d %H:%M:%S").to_string(),
            &Utc::now().format("%Y-%m-%d %H:%M:%S").to_string(),
        ])
        .build()?;

    transaction.execute(&insert_strategy_query).await?;
    println!("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transaction.commit().await?;
    println!("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    let check_query = PostgreSQLQueryBuilder::new()
        .select_all()
        .from("users")
        .where_eq("id", "'user_tx_001'")
        .build()?;

    let users: Vec<User> = connector.query(&check_query).await?;
    println!("‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {}", users.len());

    connector.disconnect().await?;
    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä 7: –£—Ç–∏–ª–∏—Ç—ã PostgreSQL
pub async fn postgresql_utilities() -> Result<(), Box<dyn std::error::Error>> {
    println!("üõ†Ô∏è –ü—Ä–∏–º–µ—Ä 7: –£—Ç–∏–ª–∏—Ç—ã PostgreSQL");

    let mut connector = PostgreSQLConnector::new_default();
    connector.connect().await?;
    connector.create_tables().await?;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ PostgreSQL
    let version = PostgreSQLUtils::get_version(&connector).await?;
    println!("üìã –í–µ—Ä—Å–∏—è PostgreSQL: {}", version);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
    let tables = PostgreSQLUtils::get_tables(&connector).await?;
    println!("üìä –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:");
    for table in tables {
        println!("  - {}", table);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ users
    let table_info = PostgreSQLUtils::get_table_info(&connector, "users").await?;
    println!("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ users:");
    for (column, data_type, is_nullable) in table_info {
        println!("  - {}: {} (nullable: {})", column, data_type, is_nullable);
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    PostgreSQLUtils::truncate_all_tables(&connector).await?;
    println!("üßπ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã");

    connector.disconnect().await?;
    Ok(())
}

/// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ PostgreSQL
pub async fn run_all_postgresql_examples() -> Result<(), Box<dyn std::error::Error>> {
    println!("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ PostgreSQL –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞");
    println!("{}", "=".repeat(60));

    basic_postgresql_operations().await?;
    println!();

    user_crud_operations().await?;
    println!();

    trading_data_operations().await?;
    println!();

    complex_queries().await?;
    println!();

    analytical_queries().await?;
    println!();

    transaction_operations().await?;
    println!();

    postgresql_utilities().await?;
    println!();

    println!("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã PostgreSQL –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    Ok(())
}
