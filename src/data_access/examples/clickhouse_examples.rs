//! –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ClickHouse –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞

use crate::data_access::database::{
    BacktestRecord, ClickHouseConnector, OhlcvData, TradeRecord,
};
use crate::data_access::models::*;
use crate::data_access::query_builder::{
    ClickHouseBacktestQueryBuilder, ClickHouseCandleQueryBuilder, ClickHouseQueryBuilder,
    ClickHouseTradeQueryBuilder, ClickHouseUtils,
};
use crate::data_access::traits::{DataSource, Database};
use chrono::{Duration, NaiveDate, Utc};
use std::time::Duration as StdDuration;

/// –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ClickHouse –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
pub async fn basic_usage_example() -> Result<(), Box<dyn std::error::Error>> {
    println!("=== –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ClickHouse ===");

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
    let mut connector =
        ClickHouseConnector::new("localhost".to_string(), 9000, "trading".to_string())
            .with_auth("default".to_string(), "".to_string())
            .with_timeouts(StdDuration::from_secs(30), StdDuration::from_secs(300));

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    connector.connect().await?;
    println!("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
    println!("‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –∏–∑ migrations/clickhouse/");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connector.ping().await?;
    println!("‚úÖ Ping —É—Å–ø–µ—à–µ–Ω");

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    connector.disconnect().await?;
    println!("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç ClickHouse");

    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏ (—Å–≤–µ—á–∏)
pub async fn candle_data_example() -> Result<(), Box<dyn std::error::Error>> {
    println!("\n=== –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏ ===");

    let mut connector =
        ClickHouseConnector::new("localhost".to_string(), 9000, "trading".to_string());

    connector.connect().await?;

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö OHLCV –¥–∞–Ω–Ω—ã—Ö
    let ohlcv_data = vec![
        OhlcvData {
            symbol: "BTCUSDT".to_string(),
            timeframe: "1h".to_string(),
            timestamp: Utc::now() - Duration::hours(2),
            open: 50000.0,
            high: 51000.0,
            low: 49500.0,
            close: 50500.0,
            volume: 1000.0,
        },
        OhlcvData {
            symbol: "BTCUSDT".to_string(),
            timeframe: "1h".to_string(),
            timestamp: Utc::now() - Duration::hours(1),
            open: 50500.0,
            high: 51500.0,
            low: 50000.0,
            close: 51200.0,
            volume: 1200.0,
        },
        OhlcvData {
            symbol: "BTCUSDT".to_string(),
            timeframe: "1h".to_string(),
            timestamp: Utc::now(),
            open: 51200.0,
            high: 52000.0,
            low: 50800.0,
            close: 51800.0,
            volume: 1500.0,
        },
    ];

    // –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    let inserted = connector.insert_ohlcv(&ohlcv_data).await?;
    println!("‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π", inserted);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    let start_time = Utc::now() - Duration::days(1);
    let end_time = Utc::now();
    let retrieved_data = connector
        .get_ohlcv("BTCUSDT", "1h", start_time, end_time, Some(10))
        .await?;
    println!("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π", retrieved_data.len());

    for data in &retrieved_data {
        println!(
            "  üìä {}: O={}, H={}, L={}, C={}, V={}",
            data.timestamp.format("%Y-%m-%d %H:%M:%S"),
            data.open,
            data.high,
            data.low,
            data.close,
            data.volume
        );
    }

    connector.disconnect().await?;
    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏
pub async fn trade_data_example() -> Result<(), Box<dyn std::error::Error>> {
    println!("\n=== –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏ ===");

    let mut connector =
        ClickHouseConnector::new("localhost".to_string(), 9000, "trading".to_string());

    connector.connect().await?;

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    let trades = vec![
        TradeRecord {
            trade_id: "trade_1".to_string(),
            strategy_id: "strategy_1".to_string(),
            symbol: "BTCUSDT".to_string(),
            side: "buy".to_string(),
            quantity: 0.1,
            entry_price: 51000.0,
            exit_price: None,
            entry_time: Utc::now() - Duration::minutes(30),
            exit_time: None,
            pnl: None,
            commission: 5.1,
            status: "open".to_string(),
            metadata: "{}".to_string(),
        },
        TradeRecord {
            trade_id: "trade_2".to_string(),
            strategy_id: "strategy_1".to_string(),
            symbol: "BTCUSDT".to_string(),
            side: "sell".to_string(),
            quantity: 0.05,
            entry_price: 50000.0,
            exit_price: Some(51500.0),
            entry_time: Utc::now() - Duration::hours(1),
            exit_time: Some(Utc::now() - Duration::minutes(15)),
            pnl: Some(75.0),
            commission: 2.5,
            status: "closed".to_string(),
            metadata: "{}".to_string(),
        },
    ];

    // –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    let inserted = connector.insert_trades(&trades).await?;
    println!("‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {} —Å–¥–µ–ª–æ–∫", inserted);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —Å–∏–º–≤–æ–ª—É
    let retrieved_trades = connector
        .get_trades(
            Some("strategy_1"),
            Some("BTCUSDT"),
            Some(Utc::now() - Duration::hours(2)),
            Some(Utc::now()),
            Some("closed"),
            Some(10),
        )
        .await?;

    println!("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} —Å–¥–µ–ª–æ–∫", retrieved_trades.len());

    for trade in &retrieved_trades {
        println!(
            "  üí∞ {}: {} {} @ {} (PnL: {:?}, Status: {})",
            trade.entry_time.format("%Y-%m-%d %H:%M:%S"),
            trade.side,
            trade.quantity,
            trade.entry_price,
            trade.pnl,
            trade.status
        );
    }

    connector.disconnect().await?;
    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—ç–∫—Ç–µ—Å—Ç–æ–≤
pub async fn backtest_results_example() -> Result<(), Box<dyn std::error::Error>> {
    println!("\n=== –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—ç–∫—Ç–µ—Å—Ç–æ–≤ ===");

    let mut connector =
        ClickHouseConnector::new("localhost".to_string(), 9000, "trading".to_string());

    connector.connect().await?;

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞
    let backtest_result = BacktestRecord {
        backtest_id: "bt_1".to_string(),
        strategy_id: "strategy_1".to_string(),
        symbol: "BTCUSDT".to_string(),
        timeframe: "1h".to_string(),
        start_date: NaiveDate::from_ymd_opt(2024, 1, 1).unwrap(),
        end_date: NaiveDate::from_ymd_opt(2024, 1, 31).unwrap(),
        total_trades: 150,
        winning_trades: 95,
        losing_trades: 55,
        total_pnl: 15500.0,
        max_drawdown: -5.2,
        sharpe_ratio: 1.8,
        profit_factor: 2.1,
        win_rate: 63.33,
        avg_win: 200.0,
        avg_loss: -95.0,
        execution_time_ms: 1250,
    };

    // –í—Å—Ç–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    let inserted = connector.insert_backtest_result(&backtest_result).await?;
    println!("‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ç–∫—Ç–µ—Å—Ç–∞ ({} –∑–∞–ø–∏—Å–µ–π)", inserted);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    let results = connector
        .get_backtest_results(Some("strategy_1"), Some("BTCUSDT"), Some("1h"), Some(5))
        .await?;

    println!("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–æ–≤", results.len());

    for result in &results {
        println!(
            "  üìà Strategy {}: PnL={}, Sharpe={}, DD={}%, Trades={}",
            result.strategy_id,
            result.total_pnl,
            result.sharpe_ratio,
            result.max_drawdown,
            result.total_trades
        );
    }

    connector.disconnect().await?;
    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Query Builder
pub async fn query_builder_example() -> Result<(), Box<dyn std::error::Error>> {
    println!("\n=== –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Query Builder ===");

    // –ë–∞–∑–æ–≤—ã–π Query Builder
    let query = ClickHouseQueryBuilder::new()
        .table("trading.ohlcv_data")
        .select(&["timestamp", "symbol", "timeframe", "close", "volume"])
        .where_eq("symbol", "'BTCUSDT'")
        .where_eq("timeframe", "'1h'")
        .where_gte("timestamp", "'2024-01-01 00:00:00'")
        .order_by_desc("timestamp")
        .limit(100)
        .build()?;

    println!("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å:");
    println!("{}", query);

    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Candle Query Builder
    let candle_query = ClickHouseCandleQueryBuilder::new()
        .by_symbol("BTCUSDT")
        .last_days(7)
        .latest(50)
        .build()?;

    println!("\nüìä –ó–∞–ø—Ä–æ—Å –¥–ª—è —Å–≤–µ—á–µ–π:");
    println!("{}", candle_query);

    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Trade Query Builder
    let trade_query = ClickHouseTradeQueryBuilder::new()
        .by_symbol("BTCUSDT")
        .by_side(TradeSide::Buy)
        .time_range(Utc::now() - Duration::days(1), Utc::now())
        .price_range(50000.0, 52000.0)
        .order_by_time_desc()
        .limit(20)
        .build()?;

    println!("\nüí∞ –ó–∞–ø—Ä–æ—Å –¥–ª—è —Å–¥–µ–ª–æ–∫:");
    println!("{}", trade_query);

    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Backtest Query Builder
    let backtest_query = ClickHouseBacktestQueryBuilder::new()
        .by_strategy("strategy_1")
        .min_return(10.0)
        .min_sharpe(1.5)
        .max_drawdown(-10.0)
        .order_by_sharpe_desc()
        .limit(10)
        .build()?;

    println!("\nüìà –ó–∞–ø—Ä–æ—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–æ–≤:");
    println!("{}", backtest_query);

    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
pub async fn analytics_example() -> Result<(), Box<dyn std::error::Error>> {
    println!("\n=== –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ===");

    let mut connector =
        ClickHouseConnector::new("localhost".to_string(), 9000, "trading".to_string());

    connector.connect().await?;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª—É
    let stats = connector.get_symbol_stats("BTCUSDT", "1h").await?;
    println!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª—É BTCUSDT:");
    for (key, value) in &stats {
        println!("  {}: {}", key, value);
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    let strategy_stats = connector.get_strategy_stats("strategy_1").await?;
    println!("\nüèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:");
    for (key, value) in &strategy_stats {
        println!("  {}: {}", key, value);
    }

    // –ü—Ä–∏–º–µ—Ä—ã –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Utils
    let volatility_query = ClickHouseUtils::volatility_analysis_query("BTCUSDT", "1h", 30);
    println!("\nüìà –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏:");
    println!("{}", volatility_query);

    let correlation_query = ClickHouseUtils::correlation_query("BTCUSDT", "ETHUSDT", "1h", 30);
    println!("\nüîó –ó–∞–ø—Ä–æ—Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:");
    println!("{}", correlation_query);

    connector.disconnect().await?;
    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è ClickHouse)
pub async fn transaction_example() -> Result<(), Box<dyn std::error::Error>> {
    println!("\n=== –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ ===");

    let mut connector =
        ClickHouseConnector::new("localhost".to_string(), 9000, "trading".to_string());

    connector.connect().await?;

    // ClickHouse –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    // –ù–æ –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é" –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    let transaction = connector.begin_transaction().await?;

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ "—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
    transaction
        .execute("INSERT INTO test_table (id, value) VALUES (1, 'test')")
        .await?;

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–≤ ClickHouse —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤)
    transaction.commit().await?;

    println!("‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ –≤ '—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' –≤—ã–ø–æ–ª–Ω–µ–Ω—ã");

    connector.disconnect().await?;
    Ok(())
}

/// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
pub async fn run_all_examples() -> Result<(), Box<dyn std::error::Error>> {
    println!("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ ClickHouse –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞\n");

    basic_usage_example().await?;
    candle_data_example().await?;
    trade_data_example().await?;
    backtest_results_example().await?;
    query_builder_example().await?;
    analytics_example().await?;
    transaction_example().await?;

    println!("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    Ok(())
}
