//! –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MongoDB –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞

use crate::data_access::database::mongodb::{MongoDBConnector, MongoDBUtils};
use crate::data_access::models::*;
use crate::data_access::query_builder::mongodb::{
    BacktestQueryBuilder,
    CandleQueryBuilder,
    MongoDBQueryBuilder,
    SortDirection,
    // –ù–æ–≤—ã–µ –±–∏–ª–¥–µ—Ä—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    StrategyConfigQueryBuilder,
    StrategyQueryBuilder,
    SystemConfigQueryBuilder,
    SystemMetadataQueryBuilder,
    TradeQueryBuilder,
    UserQueryBuilder,
    UserSettingsQueryBuilder,
};
use crate::data_access::traits::{DataSource, Database};
use chrono::{DateTime, Utc};

/// –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å MongoDB
pub async fn basic_mongodb_operations() -> Result<(), Box<dyn std::error::Error>> {
    println!("üîß –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å MongoDB");

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    let mut connector = MongoDBConnector::new_default();

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connector.connect().await?;
    println!("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    connector.create_indexes().await?;
    println!("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã");

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connector.ping().await?;
    println!("‚úÖ Ping —É—Å–ø–µ—à–µ–Ω");

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    let stats = connector.get_database_stats().await?;
    println!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:");
    for (collection, count) in stats {
        println!("  {}: {} –∑–∞–ø–∏—Å–µ–π", collection, count);
    }

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    connector.disconnect().await?;
    println!("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB");

    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä 2: CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
pub async fn user_crud_operations() -> Result<(), Box<dyn std::error::Error>> {
    println!("üë§ –ü—Ä–∏–º–µ—Ä 2: CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏");

    let mut connector = MongoDBConnector::new_default();
    connector.connect().await?;
    connector.create_indexes().await?;

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = User {
        id: "user_001".to_string(),
        username: "trader_john".to_string(),
        email: "john@example.com".to_string(),
        created_at: Utc::now(),
        updated_at: Utc::now(),
    };

    connector.create_user(&user).await?;
    println!("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω");

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    let retrieved_user = connector.get_user_by_id("user_001").await?;
    if let Some(user) = retrieved_user {
        println!("‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {} ({})", user.username, user.email);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
    let user_by_username = connector.get_user_by_username("trader_john").await?;
    if let Some(user) = user_by_username {
        println!(
            "‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ username: {} ({})",
            user.username, user.email
        );
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let mut updated_user = user.clone();
    updated_user.email = "john.updated@example.com".to_string();
    updated_user.updated_at = Utc::now();

    connector.update_user("user_001", &updated_user).await?;
    println!("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω");

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    connector.delete_user("user_001").await?;
    println!("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω");

    connector.disconnect().await?;
    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä 9: –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (–æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ MongoDB)

/// –ü—Ä–∏–º–µ—Ä 10: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏

/// –ü—Ä–∏–º–µ—Ä 3: –†–∞–±–æ—Ç–∞ —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
pub async fn trading_data_operations() -> Result<(), Box<dyn std::error::Error>> {
    println!("üìà –ü—Ä–∏–º–µ—Ä 3: –†–∞–±–æ—Ç–∞ —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏");

    let mut connector = MongoDBConnector::new_default();
    connector.connect().await?;
    connector.create_indexes().await?;

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    let strategy = Strategy {
        id: "strategy_001".to_string(),
        name: "Moving Average Crossover".to_string(),
        description: Some("–ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö".to_string()),
        parameters: serde_json::json!({
            "short_period": 10,
            "long_period": 30,
            "threshold": 0.01
        }),
        enabled: true,
        created_at: Utc::now(),
        updated_at: Utc::now(),
    };

    connector.create_strategy(&strategy).await?;
    println!("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞");

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π
    let candles = vec![
        Candle {
            timestamp: Utc::now(),
            symbol: "BTCUSDT".to_string(),
            open: 50000.0,
            high: 51000.0,
            low: 49500.0,
            close: 50500.0,
            volume: 100.5,
        },
        Candle {
            timestamp: Utc::now(),
            symbol: "ETHUSDT".to_string(),
            open: 3000.0,
            high: 3100.0,
            low: 2950.0,
            close: 3050.0,
            volume: 500.0,
        },
    ];

    connector.create_candles_batch(&candles).await?;
    println!("‚úÖ –°–≤–µ—á–∏ —Å–æ–∑–¥–∞–Ω—ã");

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫
    let trades = vec![
        Trade {
            id: "trade_001".to_string(),
            timestamp: Utc::now(),
            symbol: "BTCUSDT".to_string(),
            price: 50500.0,
            quantity: 0.1,
            side: TradeSide::Buy,
            order_id: Some("order_001".to_string()),
        },
        Trade {
            id: "trade_002".to_string(),
            timestamp: Utc::now(),
            symbol: "ETHUSDT".to_string(),
            price: 3050.0,
            quantity: 1.0,
            side: TradeSide::Sell,
            order_id: Some("order_002".to_string()),
        },
    ];

    for trade in trades {
        connector.create_trade(&trade).await?;
    }
    println!("‚úÖ –°–¥–µ–ª–∫–∏ —Å–æ–∑–¥–∞–Ω—ã");

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—ç–∫—Ç–µ—Å—Ç–∞
    let backtest_result = BacktestResult {
        strategy_id: "strategy_001".to_string(),
        symbol: "BTCUSDT".to_string(),
        start_date: Utc::now(),
        end_date: Utc::now(),
        total_return: 0.15,
        sharpe_ratio: 1.8,
        max_drawdown: 0.05,
        total_trades: 100,
        winning_trades: 65,
        losing_trades: 35,
        win_rate: 0.65,
        created_at: Utc::now(),
    };

    connector.create_backtest_result(&backtest_result).await?;
    println!("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—ç–∫—Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω");

    connector.disconnect().await?;
    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä 9: –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (–æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ MongoDB)

/// –ü—Ä–∏–º–µ—Ä 10: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
pub async fn complex_configuration_workflow() -> Result<(), Box<dyn std::error::Error>> {
    println!("{}", "=".repeat(60));
    println!("üîÑ –ü–†–ò–ú–ï–† 10: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏");
    println!("{}", "=".repeat(60));

    let mut connector = MongoDBConnector::new_default();
    connector.connect().await?;
    connector.create_indexes().await?;

    // –°—Ü–µ–Ω–∞—Ä–∏–π: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
    println!("\nüöÄ –°—Ü–µ–Ω–∞—Ä–∏–π: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ 'Moving Average Crossover'");

    // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã, —Ç–∞–∫ –∫–∞–∫ MongoDB –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
    // –î–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞

    // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã
    // let all_configs_query = MongoDBUtils::get_all_active_configs()?;
    println!("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)");

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –º–æ–¥—É–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    // let strategy_module_configs = MongoDBUtils::get_system_configs("strategy_engine", None)?;
    println!("‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –º–æ–¥—É–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)");

    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    // let indicator_metadata = MongoDBUtils::get_system_metadata("indicator_config")?;
    println!("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)");

    // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ —Ç–∏–ø—É
    // let risk_configs = MongoDBUtils::get_strategy_configs_by_type("strategy_001", "risk_management")?;
    println!("üõ°Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)");

    // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è UI
    // let ui_settings = MongoDBUtils::get_user_settings("user_001", Some("ui_preferences"))?;
    println!("üé® –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ UI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)");

    // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // let specific_setting = MongoDBUtils::get_user_setting_by_key("user_001", "theme")?;
    println!("üé≠ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)");

    // 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –∏–º–µ–Ω
    // let trading_signals_metadata = MongoDBUtils::get_metadata_by_namespace("trading.signals")?;
    println!("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)");

    println!("\n‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    println!("üìù –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã");

    connector.disconnect().await?;
    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä 4: –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å Query Builder
pub async fn complex_queries() -> Result<(), Box<dyn std::error::Error>> {
    println!("üîç –ü—Ä–∏–º–µ—Ä 4: –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å Query Builder");

    let mut connector = MongoDBConnector::new_default();
    connector.connect().await?;
    connector.create_indexes().await?;

    // –ó–∞–ø—Ä–æ—Å —Å–≤–µ—á–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–∏–º–≤–æ–ª—É
    let candle_query = CandleQueryBuilder::new()
        .by_symbol("BTCUSDT")
        .time_range(Utc::now() - chrono::Duration::days(7), Utc::now())
        .min_volume(100.0)
        .order_by_timestamp()
        .build()?;

    println!("üìä –ó–∞–ø—Ä–æ—Å —Å–≤–µ—á–µ–π: {}", candle_query.to_string());

    // –ó–∞–ø—Ä–æ—Å —Å–¥–µ–ª–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç–æ—Ä–æ–Ω–µ
    let trade_query = TradeQueryBuilder::new()
        .by_symbol("BTCUSDT")
        .by_side(TradeSide::Buy)
        .price_range(50000.0, 51000.0)
        .order_by_timestamp()
        .build()?;

    println!("üí∞ –ó–∞–ø—Ä–æ—Å —Å–¥–µ–ª–æ–∫: {}", trade_query.to_string());

    // –ó–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    let backtest_query = BacktestQueryBuilder::new()
        .by_strategy("strategy_001")
        .min_return(0.1)
        .min_sharpe(1.5)
        .max_drawdown(0.1)
        .order_by_return()
        .build()?;

    println!(
        "üìà –ó–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–æ–≤: {}",
        backtest_query.to_string()
    );

    // –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É
    let strategy_query = StrategyQueryBuilder::new()
        .enabled_only()
        .by_name("Moving Average")
        .order_by_created_at()
        .build()?;

    println!("üéØ –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {}", strategy_query.to_string());

    connector.disconnect().await?;
    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä 9: –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (–æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ MongoDB)

/// –ü—Ä–∏–º–µ—Ä 10: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏

/// –ü—Ä–∏–º–µ—Ä 5: –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
pub async fn analytical_queries() -> Result<(), Box<dyn std::error::Error>> {
    println!("üìä –ü—Ä–∏–º–µ—Ä 5: –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã");

    let mut connector = MongoDBConnector::new_default();
    connector.connect().await?;
    connector.create_indexes().await?;

    // –¢–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    let top_strategies_query = MongoDBUtils::get_top_strategies_by_return(&connector, 10).await?;
    println!(
        "üèÜ –¢–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {} –∑–∞–ø–∏—Å–µ–π",
        top_strategies_query.len()
    );

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    let symbol_stats_query = connector.get_symbol_statistics().await?;
    println!(
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º: {} –∑–∞–ø–∏—Å–µ–π",
        symbol_stats_query.len()
    );

    // –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤
    let daily_stats_query = connector.get_daily_trading_stats().await?;
    println!(
        "üìÖ –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤: {} –∑–∞–ø–∏—Å–µ–π",
        daily_stats_query.len()
    );

    // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    let active_users_query = MongoDBUtils::get_strategy_performance(&connector).await?;
    println!(
        "üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {} –∑–∞–ø–∏—Å–µ–π",
        active_users_query.len()
    );

    // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    let strategy_performance_query = MongoDBUtils::get_strategy_performance(&connector).await?;
    println!(
        "üéØ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {} –∑–∞–ø–∏—Å–µ–π",
        strategy_performance_query.len()
    );

    connector.disconnect().await?;
    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä 9: –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (–æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ MongoDB)
pub async fn configuration_and_metadata_operations() -> Result<(), Box<dyn std::error::Error>> {
    println!("{}", "=".repeat(60));
    println!("üîß –ü–†–ò–ú–ï–† 9: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ MongoDB");
    println!("{}", "=".repeat(60));

    let mut connector = MongoDBConnector::new_default();
    connector.connect().await?;
    connector.create_indexes().await?;

    // === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –°–¢–†–ê–¢–ï–ì–ò–ô ===
    println!("\nüìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:");

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    let strategy_configs_query = StrategyConfigQueryBuilder::new()
        .by_strategy("strategy_001")
        .active_only()
        .order_by_created_at()
        .build()?;
    println!(
        "üéØ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {}",
        strategy_configs_query.to_string()
    );

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ —Ç–∏–ø—É
    let config_by_type_query = StrategyConfigQueryBuilder::new()
        .by_strategy("strategy_001")
        .by_config_type("risk_management")
        .active_only()
        .build()?;
    println!(
        "‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞: {}",
        config_by_type_query.to_string()
    );

    // === –°–ò–°–¢–ï–ú–ù–´–ï –ú–ï–¢–ê–î–ê–ù–ù–´–ï ===
    println!("\nüìã –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:");

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∏–ø—É
    let system_metadata_query = SystemMetadataQueryBuilder::new()
        .by_metadata_type("indicator_config")
        .order_by_updated_at()
        .build()?;
    println!(
        "üìà –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {}",
        system_metadata_query.to_string()
    );

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –∏–º–µ–Ω
    let namespace_metadata_query = SystemMetadataQueryBuilder::new()
        .by_namespace("trading.signals")
        .order_by_updated_at()
        .build()?;
    println!(
        "üîç –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {}",
        namespace_metadata_query.to_string()
    );

    // === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
    println!("\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:");

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user_settings_query = UserSettingsQueryBuilder::new()
        .by_user("user_001")
        .order_by_updated_at()
        .build()?;
    println!(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}",
        user_settings_query.to_string()
    );

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let category_settings_query = UserSettingsQueryBuilder::new()
        .by_user("user_001")
        .by_category("ui_preferences")
        .order_by_updated_at()
        .build()?;
    println!("üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ UI: {}", category_settings_query.to_string());

    // === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´ ===
    println!("\nüñ•Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã:");

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –º–æ–¥—É–ª—è
    let module_config_query = SystemConfigQueryBuilder::new()
        .by_module("data_access")
        .active_only()
        .order_by_priority()
        .build()?;
    println!(
        "üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è: {}",
        module_config_query.to_string()
    );

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ –æ–∫—Ä—É–∂–µ–Ω–∏—é
    let env_config_query = SystemConfigQueryBuilder::new()
        .by_module("trading_engine")
        .by_environment("production")
        .active_only()
        .order_by_priority()
        .build()?;
    println!("üè≠ –ü—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", env_config_query.to_string());

    // === –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –£–¢–ò–õ–ò–¢ ===
    println!("\nüõ†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç:");

    // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –≠—Ç–∏ —É—Ç–∏–ª–∏—Ç—ã –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã, —Ç–∞–∫ –∫–∞–∫ MongoDB –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    // –í –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥—Ä—É–≥–∏–µ –ø–æ–¥—Ö–æ–¥—ã

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—ã
    // let strategy_configs_util = MongoDBUtils::get_strategy_configs("strategy_001")?;
    println!("üéØ –£—Ç–∏–ª–∏—Ç–∞ - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)");

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—ã
    // let system_metadata_util = MongoDBUtils::get_system_metadata("indicator_config")?;
    println!("üìà –£—Ç–∏–ª–∏—Ç–∞ - —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)");

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—ã
    // let user_settings_util = MongoDBUtils::get_user_settings("user_001", Some("ui_preferences"))?;
    println!("üë§ –£—Ç–∏–ª–∏—Ç–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)");

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—ã
    // let system_configs_util = MongoDBUtils::get_system_configs("data_access", Some("production"))?;
    println!("üñ•Ô∏è –£—Ç–∏–ª–∏—Ç–∞ - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)");

    connector.disconnect().await?;
    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä 10: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏

/// –ü—Ä–∏–º–µ—Ä 6: –†–∞–±–æ—Ç–∞ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
pub async fn transaction_operations() -> Result<(), Box<dyn std::error::Error>> {
    println!("üîÑ –ü—Ä–∏–º–µ—Ä 6: –†–∞–±–æ—Ç–∞ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏");

    let mut connector = MongoDBConnector::new_default();
    connector.connect().await?;
    connector.create_indexes().await?;

    // –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    let transaction = connector.begin_transaction().await?;
    println!("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞—á–∞—Ç–∞");

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transaction.execute("db.users.insertOne({id: 'user_tx_001', username: 'transaction_user', email: 'tx@example.com'})").await?;
    println!("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");

    transaction.execute("db.strategies.insertOne({id: 'strategy_tx_001', name: 'Transaction Strategy', enabled: true})").await?;
    println!("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transaction.commit().await?;
    println!("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");

    connector.disconnect().await?;
    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä 9: –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (–æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ MongoDB)

/// –ü—Ä–∏–º–µ—Ä 10: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏

/// –ü—Ä–∏–º–µ—Ä 7: –£—Ç–∏–ª–∏—Ç—ã MongoDB
pub async fn mongodb_utilities() -> Result<(), Box<dyn std::error::Error>> {
    println!("üõ†Ô∏è –ü—Ä–∏–º–µ—Ä 7: –£—Ç–∏–ª–∏—Ç—ã MongoDB");

    let mut connector = MongoDBConnector::new_default();
    connector.connect().await?;
    connector.create_indexes().await?;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ MongoDB
    let version = MongoDBUtils::get_version(&connector).await?;
    println!("üìã –í–µ—Ä—Å–∏—è MongoDB: {}", version);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
    let collections = MongoDBUtils::get_collections(&connector).await?;
    println!("üìä –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:");
    for collection in collections {
        println!("  - {}", collection);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users
    let collection_info = MongoDBUtils::get_collection_info(&connector, "users").await?;
    println!("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users:");
    println!(
        "  - –†–∞–∑–º–µ—Ä: {} –±–∞–π—Ç",
        collection_info
            .get("size")
            .unwrap_or(&mongodb::bson::Bson::Int64(0))
    );
    println!(
        "  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {}",
        collection_info
            .get("count")
            .unwrap_or(&mongodb::bson::Bson::Int64(0))
    );

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    let top_strategies = MongoDBUtils::get_top_strategies_by_return(&connector, 5).await?;
    println!("üèÜ –¢–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:");
    for strategy in top_strategies {
        println!(
            "  - {}: Return={}%, Sharpe={}",
            strategy
                .get("_id")
                .unwrap_or(&mongodb::bson::Bson::String("Unknown".to_string())),
            strategy
                .get("avg_return")
                .unwrap_or(&mongodb::bson::Bson::Double(0.0)),
            strategy
                .get("avg_sharpe")
                .unwrap_or(&mongodb::bson::Bson::Double(0.0))
        );
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    let strategy_performance = MongoDBUtils::get_strategy_performance(&connector).await?;
    println!("üéØ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:");
    for strategy in strategy_performance {
        println!(
            "  - {}: Return={}%, Tests={}",
            strategy
                .get("_id")
                .unwrap_or(&mongodb::bson::Bson::String("Unknown".to_string())),
            strategy
                .get("avg_return")
                .unwrap_or(&mongodb::bson::Bson::Double(0.0)),
            strategy
                .get("test_count")
                .unwrap_or(&mongodb::bson::Bson::Int64(0))
        );
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    connector.truncate_all_collections().await?;
    println!("üßπ –í—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã");

    connector.disconnect().await?;
    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä 10: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏

/// –ü—Ä–∏–º–µ—Ä 8: –ê–≥—Ä–µ–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
pub async fn aggregation_queries() -> Result<(), Box<dyn std::error::Error>> {
    println!("üîó –ü—Ä–∏–º–µ—Ä 8: –ê–≥—Ä–µ–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã");

    let mut connector = MongoDBConnector::new_default();
    connector.connect().await?;
    connector.create_indexes().await?;

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    let trades = vec![
        Trade {
            id: "trade_001".to_string(),
            timestamp: Utc::now(),
            symbol: "BTCUSDT".to_string(),
            price: 50000.0,
            quantity: 0.1,
            side: TradeSide::Buy,
            order_id: Some("order_001".to_string()),
        },
        Trade {
            id: "trade_002".to_string(),
            timestamp: Utc::now(),
            symbol: "BTCUSDT".to_string(),
            price: 51000.0,
            quantity: 0.2,
            side: TradeSide::Sell,
            order_id: Some("order_002".to_string()),
        },
        Trade {
            id: "trade_003".to_string(),
            timestamp: Utc::now(),
            symbol: "ETHUSDT".to_string(),
            price: 3000.0,
            quantity: 1.0,
            side: TradeSide::Buy,
            order_id: Some("order_003".to_string()),
        },
    ];

    for trade in trades {
        connector.create_trade(&trade).await?;
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    let symbol_stats = connector.get_symbol_statistics().await?;
    println!("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º:");
    for stat in symbol_stats {
        println!(
            "  - {}: {} —Å–¥–µ–ª–æ–∫, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {}, –æ–±—ä–µ–º: {}",
            stat.get("_id")
                .unwrap_or(&mongodb::bson::Bson::String("Unknown".to_string())),
            stat.get("trade_count")
                .unwrap_or(&mongodb::bson::Bson::Int64(0)),
            stat.get("avg_price")
                .unwrap_or(&mongodb::bson::Bson::Double(0.0)),
            stat.get("total_volume")
                .unwrap_or(&mongodb::bson::Bson::Double(0.0))
        );
    }

    // –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤
    let daily_stats = connector.get_daily_trading_stats().await?;
    println!("üìÖ –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤:");
    for stat in daily_stats {
        println!(
            "  - {}: {} —Å–¥–µ–ª–æ–∫, –æ–±—ä–µ–º: {}, —Å–∏–º–≤–æ–ª–æ–≤: {}",
            stat.get("_id")
                .unwrap_or(&mongodb::bson::Bson::String("Unknown".to_string())),
            stat.get("trade_count")
                .unwrap_or(&mongodb::bson::Bson::Int64(0)),
            stat.get("total_volume")
                .unwrap_or(&mongodb::bson::Bson::Double(0.0)),
            stat.get("symbol_count")
                .unwrap_or(&mongodb::bson::Bson::Int64(0))
        );
    }

    connector.disconnect().await?;
    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä 10: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏

/// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ MongoDB
pub async fn run_all_mongodb_examples() -> Result<(), Box<dyn std::error::Error>> {
    println!("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ MongoDB –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞");
    println!("{}", "=".repeat(60));

    basic_mongodb_operations().await?;
    println!();

    user_crud_operations().await?;
    println!();

    trading_data_operations().await?;
    println!();

    complex_queries().await?;
    println!();

    analytical_queries().await?;
    println!();

    transaction_operations().await?;
    println!();

    mongodb_utilities().await?;
    println!();

    aggregation_queries().await?;
    println!();

    println!("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã MongoDB –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    Ok(())
}
