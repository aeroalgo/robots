use crate::condition::{
    factory::ConditionFactory,
    base::Condition,
};
use crate::indicators::{
    factory::IndicatorFactory,
    types::OHLCData,
};
use std::collections::HashMap;

/// –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É—Å–ª–æ–≤–∏–π —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
pub async fn indicator_condition_integration() -> Result<(), String> {
    println!("=== –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ª–æ–≤–∏–π —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ ===\n");
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ OHLC –¥–∞–Ω–Ω—ã–µ
    let ohlc_data = create_test_ohlc_data();
    
    // 1. –°–æ–∑–¥–∞–µ–º RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    println!("1. –°–æ–∑–¥–∞–Ω–∏–µ RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞...");
    let mut rsi_params = HashMap::new();
    rsi_params.insert("period".to_string(), 14.0);
    
    let rsi_indicator = IndicatorFactory::create_indicator("RSI", rsi_params)
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RSI: {:?}", e))?;
    
    // 2. –í—ã—á–∏—Å–ª—è–µ–º RSI
    println!("2. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ RSI...");
    let rsi_data = rsi_indicator.calculate_ohlc(&ohlc_data).await
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è RSI: {:?}", e))?;
    
    println!("   RSI –∑–Ω–∞—á–µ–Ω–∏—è: {:?}", rsi_data);
    
    // 3. –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏–µ "RSI –≤—ã—à–µ 70" (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)
    println!("3. –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏—è 'RSI –≤—ã—à–µ 70'...");
    let threshold_data = vec![70.0; rsi_data.len()]; // –í–µ–∫—Ç–æ—Ä —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º 70
    
    let overbought_condition = ConditionFactory::create_condition_default("Above")
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª–æ–≤–∏—è: {:?}", e))?;
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö RSI
    println!("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö RSI...");
    let overbought_result = overbought_condition.check_dual(&rsi_data, &threshold_data).await
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è: {:?}", e))?;
    
    println!("   –°–∏–≥–Ω–∞–ª—ã –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏: {:?}", overbought_result.signals);
    println!("   –°–∏–ª—ã —Å–∏–≥–Ω–∞–ª–æ–≤: {:?}", overbought_result.strengths);
    
    // 5. –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏–µ "RSI –Ω–∏–∂–µ 30" (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)
    println!("5. –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏—è 'RSI –Ω–∏–∂–µ 30'...");
    let threshold_data_30 = vec![30.0; rsi_data.len()]; // –í–µ–∫—Ç–æ—Ä —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º 30
    
    let oversold_condition = ConditionFactory::create_condition_default("Above")
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª–æ–≤–∏—è: {:?}", e))?;
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö RSI
    println!("6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö RSI...");
    let oversold_result = oversold_condition.check_dual(&rsi_data, &threshold_data_30).await
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è: {:?}", e))?;
    
    // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã (—Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º "–≤—ã—à–µ 30", –∞ –Ω–∞–º –Ω—É–∂–Ω–æ "–Ω–∏–∂–µ 30")
    let oversold_signals: Vec<bool> = oversold_result.signals
        .iter()
        .map(|&s| !s)
        .collect();
    
    println!("   –°–∏–≥–Ω–∞–ª—ã –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏: {:?}", oversold_signals);
    
    // 7. –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    println!("7. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...");
    let mut trading_signals = Vec::with_capacity(rsi_data.len());
    let mut signal_types = Vec::with_capacity(rsi_data.len());
    
    for i in 0..rsi_data.len() {
        let overbought = overbought_result.signals[i];
        let oversold = oversold_signals[i];
        
        if overbought {
            trading_signals.push("SELL");
            signal_types.push("–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å");
        } else if oversold {
            trading_signals.push("BUY");
            signal_types.push("–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å");
        } else {
            trading_signals.push("HOLD");
            signal_types.push("–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ");
        }
    }
    
    println!("   –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: {:?}", trading_signals);
    println!("   –¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤: {:?}", signal_types);
    
    // 8. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    println!("8. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...");
    let buy_signals = trading_signals.iter().filter(|&&s| s == "BUY").count();
    let sell_signals = trading_signals.iter().filter(|&&s| s == "SELL").count();
    let hold_signals = trading_signals.iter().filter(|&&s| s == "HOLD").count();
    
    println!("   –ü–æ–∫—É–ø–∫–∏: {}", buy_signals);
    println!("   –ü—Ä–æ–¥–∞–∂–∏: {}", sell_signals);
    println!("   –£–¥–µ—Ä–∂–∞–Ω–∏–µ: {}", hold_signals);
    
    // 9. –ü—Ä–∏–º–µ—Ä —Å –¥—Ä—É–≥–∏–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º - SMA
    println!("9. –ü—Ä–∏–º–µ—Ä —Å SMA –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º...");
    let mut sma_params = HashMap::new();
    sma_params.insert("period".to_string(), 5.0);
    
    let sma_indicator = IndicatorFactory::create_indicator("SMA", sma_params)
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SMA: {:?}", e))?);
    
    let sma_data = sma_indicator.calculate_ohlc(&ohlc_data).await
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è SMA: {:?}", e))?;
    
    println!("   SMA –∑–Ω–∞—á–µ–Ω–∏—è: {:?}", sma_data);
    
    // 10. –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã –≤—ã—à–µ SMA
    println!("10. –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏—è '–¶–µ–Ω–∞ –≤—ã—à–µ SMA'...");
    let price_above_sma_condition = ConditionFactory::create_condition_default("CrossesAbove")
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª–æ–≤–∏—è: {:?}", e))?;
    
    let price_above_sma_result = price_above_sma_condition.check_dual(&ohlc_data.close, &sma_data).await
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è: {:?}", e))?;
    
    println!("   –°–∏–≥–Ω–∞–ª—ã '–¶–µ–Ω–∞ –≤—ã—à–µ SMA': {:?}", price_above_sma_result.signals);
    
    // 11. –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    println!("11. –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...");
    let mut complex_signals = Vec::with_capacity(rsi_data.len());
    
    for i in 0..rsi_data.len() {
        let rsi_overbought = overbought_result.signals[i];
        let rsi_oversold = oversold_signals[i];
        let price_above_sma = price_above_sma_result.signals[i];
        
        let signal = if rsi_oversold && price_above_sma {
            "STRONG_BUY" // –°–∏–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω + —Ü–µ–Ω–∞ –≤—ã—à–µ SMA
        } else if rsi_overbought && !price_above_sma {
            "STRONG_SELL" // –°–∏–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞: RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω + —Ü–µ–Ω–∞ –Ω–∏–∂–µ SMA
        } else if rsi_oversold {
            "BUY" // –ü–æ–∫—É–ø–∫–∞: —Ç–æ–ª—å–∫–æ RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω
        } else if rsi_overbought {
            "SELL" // –ü—Ä–æ–¥–∞–∂–∞: —Ç–æ–ª—å–∫–æ RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω
        } else {
            "HOLD" // –£–¥–µ—Ä–∂–∞–Ω–∏–µ
        };
        
        complex_signals.push(signal);
    }
    
    println!("   –°–ª–æ–∂–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: {:?}", complex_signals);
    
    // 12. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    println!("12. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...");
    let strong_buy = complex_signals.iter().filter(|&&s| s == "STRONG_BUY").count();
    let strong_sell = complex_signals.iter().filter(|&&s| s == "STRONG_SELL").count();
    let buy = complex_signals.iter().filter(|&&s| s == "BUY").count();
    let sell = complex_signals.iter().filter(|&&s| s == "SELL").count();
    let hold = complex_signals.iter().filter(|&&s| s == "HOLD").count();
    
    println!("   –°–∏–ª—å–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏: {}", strong_buy);
    println!("   –°–∏–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: {}", strong_sell);
    println!("   –ü–æ–∫—É–ø–∫–∏: {}", buy);
    println!("   –ü—Ä–æ–¥–∞–∂–∏: {}", sell);
    println!("   –£–¥–µ—Ä–∂–∞–Ω–∏–µ: {}", hold);
    
    println!("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ª–æ–≤–∏–π —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    Ok(())
}

/// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö OHLC –¥–∞–Ω–Ω—ã—Ö
fn create_test_ohlc_data() -> OHLCData {
    let open = vec![100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0];
    let high = vec![101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0];
    let low = vec![99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0];
    let close = vec![100.5, 101.5, 102.5, 103.5, 104.5, 105.5, 106.5, 107.5, 108.5, 109.5];
    
    OHLCData::new(open, high, low, close)
}

/// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
pub async fn run_integration_examples() -> Result<(), String> {
    println!("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É—Å–ª–æ–≤–∏–π —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏\n");
    
    indicator_condition_integration().await?;
    
    println!("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    Ok(())
}
