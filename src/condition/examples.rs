use crate::condition::{base::Condition, factory::ConditionFactory, types::OHLCData};
use std::collections::HashMap;

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å–ª–æ–≤–∏—è "–≤—ã—à–µ –¥—Ä—É–≥–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞"
pub async fn above_condition_example() -> Result<(), String> {
    println!("=== –ü—Ä–∏–º–µ—Ä —É—Å–ª–æ–≤–∏—è 'Above' ===");

    // –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏–µ
    let condition = ConditionFactory::create_condition_default("Above")
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª–æ–≤–∏—è: {:?}", e))?;

    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –¥–≤–∞ –≤–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    let data1 = vec![95.0, 98.0, 102.0, 105.0, 103.0, 108.0, 110.0];
    let data2 = vec![100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –Ω–∞ –¥–≤—É—Ö –≤–µ–∫—Ç–æ—Ä–∞—Ö
    let result = condition
        .check_dual(&data1, &data2)
        .await
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è: {:?}", e))?;

    println!("–í–µ–∫—Ç–æ—Ä 1: {:?}", data1);
    println!("–í–µ–∫—Ç–æ—Ä 2: {:?}", data2);
    println!("–°–∏–≥–Ω–∞–ª—ã: {:?}", result.signals);
    println!("–°–∏–ª—ã —Å–∏–≥–Ω–∞–ª–æ–≤: {:?}", result.strengths);
    println!("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {:?}", result.directions);

    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å–ª–æ–≤–∏—è "–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—ã—à–µ"
pub async fn crosses_above_example() -> Result<(), String> {
    println!("\n=== –ü—Ä–∏–º–µ—Ä —É—Å–ª–æ–≤–∏—è 'CrossesAbove' ===");

    // –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏–µ
    let condition = ConditionFactory::create_condition_default("CrossesAbove")
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª–æ–≤–∏—è: {:?}", e))?;

    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –¥–≤–µ –ª–∏–Ω–∏–∏
    let line1 = vec![95.0, 98.0, 102.0, 105.0, 103.0, 108.0, 110.0];
    let line2 = vec![100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –Ω–∞ –¥–≤—É—Ö –ª–∏–Ω–∏—è—Ö
    let result = condition
        .check_dual(&line1, &line2)
        .await
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è: {:?}", e))?;

    println!("–õ–∏–Ω–∏—è 1: {:?}", line1);
    println!("–õ–∏–Ω–∏—è 2: {:?}", line2);
    println!("–°–∏–≥–Ω–∞–ª—ã –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: {:?}", result.signals);
    println!("–°–∏–ª—ã —Å–∏–≥–Ω–∞–ª–æ–≤: {:?}", result.strengths);

    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ —É—Å–ª–æ–≤–∏—è
pub async fn rising_trend_example() -> Result<(), String> {
    println!("\n=== –ü—Ä–∏–º–µ—Ä —É—Å–ª–æ–≤–∏—è 'RisingTrend' ===");

    // –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏–µ
    let mut params = HashMap::new();
    params.insert("period".to_string(), 3.0);

    let condition = ConditionFactory::create_condition("RisingTrend", params)
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª–æ–≤–∏—è: {:?}", e))?;

    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    let data = vec![100.0, 102.0, 105.0, 103.0, 108.0, 110.0, 112.0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ
    let result = condition
        .check_simple(&data)
        .await
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è: {:?}", e))?;

    println!("–î–∞–Ω–Ω—ã–µ: {:?}", data);
    println!("–ü–µ—Ä–∏–æ–¥ —Ç—Ä–µ–Ω–¥–∞: 3");
    println!("–°–∏–≥–Ω–∞–ª—ã —Ç—Ä–µ–Ω–¥–∞: {:?}", result.signals);
    println!("–°–∏–ª—ã —Å–∏–≥–Ω–∞–ª–æ–≤: {:?}", result.strengths);
    println!("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {:?}", result.directions);

    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª–æ–≤–∏–π
pub async fn combined_conditions_example() -> Result<(), String> {
    println!("\n=== –ü—Ä–∏–º–µ—Ä –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª–æ–≤–∏–π ===");

    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª–æ–≤–∏–π
    let above_condition = ConditionFactory::create_condition_default("Above")
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª–æ–≤–∏—è Above: {:?}", e))?;

    let trend_condition = ConditionFactory::create_condition_default("RisingTrend")
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª–æ–≤–∏—è RisingTrend: {:?}", e))?;

    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    let data = vec![95.0, 98.0, 102.0, 105.0, 103.0, 108.0, 110.0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–µ —É—Å–ª–æ–≤–∏–µ
    let above_result = above_condition
        .check_simple(&data)
        .await
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Above: {:?}", e))?;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–µ —É—Å–ª–æ–≤–∏–µ
    let trend_result = trend_condition
        .check_simple(&data)
        .await
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ RisingTrend: {:?}", e))?;

    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ò)
    let mut combined_signals = Vec::with_capacity(data.len());
    for i in 0..data.len() {
        let combined = above_result.signals[i] && trend_result.signals[i];
        combined_signals.push(combined);
    }

    println!("–î–∞–Ω–Ω—ã–µ: {:?}", data);
    println!("Above —Å–∏–≥–Ω–∞–ª—ã: {:?}", above_result.signals);
    println!("Trend —Å–∏–≥–Ω–∞–ª—ã: {:?}", trend_result.signals);
    println!("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–ò): {:?}", combined_signals);

    Ok(())
}

/// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å OHLC –¥–∞–Ω–Ω—ã–º–∏
pub async fn ohlc_conditions_example() -> Result<(), String> {
    println!("\n=== –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å OHLC –¥–∞–Ω–Ω—ã–º–∏ ===");

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ OHLC –¥–∞–Ω–Ω—ã–µ
    let ohlc_data = create_test_ohlc_data();

    // –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏–µ
    let condition = ConditionFactory::create_condition_default("Above")
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª–æ–≤–∏—è: {:?}", e))?;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –Ω–∞ OHLC –¥–∞–Ω–Ω—ã—Ö
    let result = condition
        .check_ohlc(&ohlc_data)
        .await
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è: {:?}", e))?;

    println!("OHLC –¥–∞–Ω–Ω—ã–µ:");
    println!("  Open: {:?}", ohlc_data.open);
    println!("  High: {:?}", ohlc_data.high);
    println!("  Low: {:?}", ohlc_data.low);
    println!("  Close: {:?}", ohlc_data.close);
    println!("–°–∏–≥–Ω–∞–ª—ã (–Ω–∞ –æ—Å–Ω–æ–≤–µ Close): {:?}", result.signals);

    Ok(())
}

/// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö OHLC –¥–∞–Ω–Ω—ã—Ö
fn create_test_ohlc_data() -> OHLCData {
    let open = vec![100.0, 101.0, 102.0, 103.0, 104.0];
    let high = vec![101.0, 102.0, 103.0, 104.0, 105.0];
    let low = vec![99.0, 100.0, 101.0, 102.0, 103.0];
    let close = vec![100.5, 101.5, 102.5, 103.5, 104.5];

    OHLCData::new(open, high, low, close)
}

/// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
pub async fn run_all_examples() -> Result<(), String> {
    println!("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã —É—Å–ª–æ–≤–∏–π\n");

    above_condition_example().await?;
    crosses_above_example().await?;
    rising_trend_example().await?;
    combined_conditions_example().await?;
    ohlc_conditions_example().await?;

    println!("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    Ok(())
}

/// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–∫–ª—é—á–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
pub async fn run_all_examples_with_integration() -> Result<(), String> {
    println!("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã —É—Å–ª–æ–≤–∏–π\n");

    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    above_condition_example().await?;
    crosses_above_example().await?;
    rising_trend_example().await?;
    combined_conditions_example().await?;
    ohlc_conditions_example().await?;

    println!("\n" + "=".repeat(50));

    // –ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    use crate::condition::integration_example::run_integration_examples;
    run_integration_examples().await?;

    println!("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    Ok(())
}
